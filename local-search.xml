<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>大数据运维</title>
    <link href="/2024/11/17/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%BF%90%E7%BB%B4/"/>
    <url>/2024/11/17/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%BF%90%E7%BB%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="大数据运维"><a href="#大数据运维" class="headerlink" title="大数据运维"></a>大数据运维</h1><hr><h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><blockquote><p>Hadoop是最受欢迎、最成熟、应用最广的大数据系统架构之一</p></blockquote><table><thead><tr><th align="center">方案</th><th align="center">组件</th></tr></thead><tbody><tr><td align="center">静态数据的批量处理</td><td align="center">Hadoop</td></tr><tr><td align="center">流式数据的实时处理</td><td align="center">Storm</td></tr><tr><td align="center">交互式数据处理</td><td align="center">Spark</td></tr></tbody></table><h2 id="大数据主流工具"><a href="#大数据主流工具" class="headerlink" title="大数据主流工具"></a>大数据主流工具</h2><table><thead><tr><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Hadoop</td><td align="center">是一个具有<code>分布式存储(HDFS)</code>和<code>分布式计算(MapReduce)</code>的大数据处理框架</td></tr><tr><td align="center">ZooKeeper</td><td align="center">是Hadoop和HBase的重要组件；是一个分布式的、开放源码的分布式应用程序协调服务</td></tr><tr><td align="center">HBase</td><td align="center">是一个高可靠性、高拓展性、面向列、可伸缩的分布式结构化存储系统</td></tr><tr><td align="center">Spark</td><td align="center">是专为大规模数据处理而设计的快速通用的计算引擎；<br>是一种与<code>Hadoop</code>相似的开源集群计算环境；</td></tr><tr><td align="center">Hive</td><td align="center">可以存储、查询和分析存储在Hadoop中的大规模数据</td></tr><tr><td align="center">MongoDB</td><td align="center">是一个基于分布式文件存储的数据库</td></tr><tr><td align="center">Kafka</td><td align="center">是一种高吞吐量的分布式发布订阅消息系统</td></tr><tr><td align="center">Storm</td><td align="center">是一个实施的、分布式以及高容错的计算系统</td></tr><tr><td align="center">Flume</td><td align="center">是一种分布式的日志收集框架</td></tr></tbody></table><p><img src="/img/assets/2024-11-17-10-32-02-image.png"></p><hr><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><h3 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h3><blockquote><p>由<code>HDFS</code>和<code>Mapreduce</code>组成的大数据处理框架；</p><ul><li><p><code>HDFS</code>为海量的数据提供存储功能</p></li><li><p><code>MapReduce</code>为海量的数据提供计算功能</p></li></ul></blockquote><h4 id="版本区别"><a href="#版本区别" class="headerlink" title="版本区别"></a>版本区别</h4><p><img title="" src="/img/assets/2024-11-17-16-02-31-image.png" alt="" width="350"><img title="" src="/img/assets/2024-11-17-16-01-50-image.png" alt="" width="267"></p><h4 id="组件的服务进程"><a href="#组件的服务进程" class="headerlink" title="组件的服务进程"></a>组件的服务进程</h4><h5 id="HDFS服务进程"><a href="#HDFS服务进程" class="headerlink" title="HDFS服务进程"></a>HDFS服务进程</h5><blockquote><p>工作结构式是：主从结构</p><p>即，主节点<code>NameNnode</code>，从节点<code>DataNode</code></p></blockquote><table><thead><tr><th align="center">NameNode</th><th align="center">DataNode</th><th align="center">Secondary NameNode</th></tr></thead><tbody><tr><td align="center">负责接收用户的操作请求、维护文件系统的目录结构、管理文件与<code>块(Block)</code>之间的关系，<code>块</code>与DataNode之间的关系</td><td align="center">负责存储文件；文件被分成<code>块</code>，存储在磁盘上</td><td align="center">辅助<code>NameNode</code>工作；用于备份元数据和恢复元数据</td></tr></tbody></table><h5 id="MapReduce和Yarn的服务进程"><a href="#MapReduce和Yarn的服务进程" class="headerlink" title="MapReduce和Yarn的服务进程"></a>MapReduce和Yarn的服务进程</h5><blockquote><p>同样，工作结构也是：主从结构</p><p>即，主节点<code>ResourceManager</code>，从节点<code>NodeManager</code></p></blockquote><table><thead><tr><th>ResourceManager</th><th>NodeManager</th></tr></thead><tbody><tr><td>负责接收客户提交的计算任务，然后把计算任务分配给<code>NodeManageer</code>执行，并监控其执行情况</td><td>复制执行<code>ResourceManager</code>分配的计算任务</td></tr></tbody></table><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><table><thead><tr><th align="center"></th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">可靠性</td><td align="center">使用<code>位</code>存储和处理数据</td></tr><tr><td align="center"><strong>高拓展性</strong></td><td align="center"><code>计算</code>是在可用的计算机集群之间分配数据并完成计算任务，集群可以无限拓展</td></tr><tr><td align="center"><strong>高效性</strong></td><td align="center">能在节点之间动态的移动数据，并保证各个节点的动态平衡</td></tr><tr><td align="center"><strong>高容错性</strong></td><td align="center">能够自动保存数据的多个副本，并且能够自动将失败的任务重新分配</td></tr><tr><td align="center"><strong>低成本</strong></td><td align="center"><code>开源</code>软件，项目成本大大降低</td></tr></tbody></table><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><blockquote><p>是Hadoop和HBase的重要组件；</p><p><mark>基于Hadoop集群</mark></p><p>目标：封装好那些复杂的、容易出错的关键服务，把<code>简单易用的接口</code>和<code>功能稳定、性能高效的系统</code>提供给用户</p></blockquote><h4 id="身份特性"><a href="#身份特性" class="headerlink" title="身份特性"></a>身份特性</h4><table><thead><tr><th align="center">Leader</th><th align="center">Follower</th><th align="center">Observer</th></tr></thead><tbody><tr><td align="center">负责客户端<code>写操作</code>的请求</td><td align="center">负责客户端<code>读操作</code>的请求；并参与<code>leader</code>的选举</td><td align="center">是特殊的<code>follower</code>，可以接收客户端<code>读操作</code>的请求，但不会参与选举</td></tr></tbody></table><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><ul><li><p>使用此项技术，可以在廉价的<code>PC Server</code>上搭建起大规模数据存储的集群</p></li><li><p>位于<code>Hadoop</code>生态系统中<code>HDFS</code>的上层，依靠<code>MapReduce</code>进行资源管理；便于拓展集群</p></li><li><p><mark>需要在Hadoop和ZooKeeper的基础上工作，依赖ZooKeeper</mark></p></li></ul><blockquote><p>对于<code>HBase版本≥0.98.5</code>，需要在启动<code>HBase</code>之前，提前设置<code>JAVA_HOME</code>环境变量</p><p>对于<code>HBase版本&lt;0.98.5</code>，<code>HBase</code>会检测<code>Java</code>的位置，若无<code>Java</code>有提示</p><ul><li><p>有严格JDK支持列表；需要根据HBase官网版本文档及JDK对应版本进行安装使用</p></li><li><p>如果基于<code>HDFS</code>平台的分布式模式安装，必须考虑<code>HBase</code>与<code>Hadoop</code>的兼容性</p></li></ul></blockquote><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><table><thead><tr><th>Client</th><th>包含<code>HBase</code>的接口，维护着一些高速缓存；用于加快对<code>HBase</code>的访问</th></tr></thead><tbody><tr><td><strong>ZooKeeper</strong></td><td>实时监控<code>Region</code>和<code>Server</code>的状态；存储<code>HBase</code>的模式</td></tr><tr><td><strong>Master</strong></td><td>为<code>Region Server</code>分配<code>Region</code>；负责<code>Region Server</code>的负载均衡</td></tr><tr><td><strong>Region Server</strong></td><td>维护<code>Master</code>分配给它的<code>Region</code>，并处理这些<code>Region</code>的I&#x2F;O请求；</td></tr></tbody></table><h4 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h4><table><thead><tr><th>独立模式（Standalone）<br>默认模式</th><th>分布式模式（Distributed）</th><th></th></tr></thead><tbody><tr><td></td><td><strong>伪分布模式</strong></td><td><strong>完全分布式模式</strong></td></tr><tr><td>使用本地文件系统，运行，在同一个JVM中所有HBase守护进程和本地ZooKeeper</td><td>守护进程运行在单个节点</td><td>守护进程运行在集群中的所有节点上</td></tr><tr><td></td><td>既可以在本地文件系统运行，也可以在HDFS上运行</td><td>只能在HDFS上运行</td></tr></tbody></table><h4 id="HDFS与HBase对比"><a href="#HDFS与HBase对比" class="headerlink" title="HDFS与HBase对比"></a>HDFS与HBase对比</h4><table><thead><tr><th align="center">HDFS</th><th align="center">HBase</th></tr></thead><tbody><tr><td align="center">更适合批处理场景</td><td align="center">更适合对数据进行随机读写、大量高并发应用、读写访问等非常简单的操作</td></tr><tr><td align="center">不支持数据随机查找、</td><td align="center">不适用于关系查询和计算</td></tr><tr><td align="center">不适合增量数据处理，不支持数据更新</td><td align="center"></td></tr></tbody></table><h3 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h3><blockquote><p>将<code>Stream</code>数据分成小的时间片段，以类似batch批量处理的方式来处理这小部分数据；</p></blockquote><ul><li><p>类<code>Hadoop MapReduce</code>的通用并行框架</p></li><li><p>启用内存分布数据集；即在内存上运行</p></li></ul><h4 id="性能优点"><a href="#性能优点" class="headerlink" title="性能优点"></a>性能优点</h4><table><thead><tr><th></th><th>描述</th></tr></thead><tbody><tr><td>有更快的运行速度</td><td>因：启用内存分布数据集</td></tr><tr><td><strong>易用性</strong></td><td>提供多种高级运算符</td></tr><tr><td><strong>通用性</strong></td><td>提供大量的库</td></tr><tr><td><strong>支持多种资源管理器</strong></td><td>支持第三方以及自带的独立集群管理器</td></tr><tr><td><strong>Shark</strong></td><td>提供和<code>Hive</code>一样的<code>HiveQL</code>命令接口，最大程度保持和<code>Hive</code>的兼容</td></tr><tr><td><strong>Spark R</strong></td><td>为R语言提供轻量级的Spark前端的R包；提供一个分布式的<code>data frame</code>数据结构</td></tr></tbody></table><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><blockquote><p>环境：Java、Hadoop、MySQL</p></blockquote><ul><li><p>在<code>Hadoop</code>生态系统中<code>Hadoop</code>组件之上</p></li><li><p>基于<code>Hadoop</code>的数据仓库</p></li></ul><h4 id="运行模式-1"><a href="#运行模式-1" class="headerlink" title="运行模式"></a>运行模式</h4><table><thead><tr><th>嵌入模式</th><th>本地模式</th><th>远程模式</th></tr></thead><tbody><tr><td>元数据信息被存储在<code>Hive</code>自带的<code>Derby</code>数据库中，而且只允许创建一个连接</td><td>元数据信息被存储在<code>MySQL</code>中，<code>MySQL</code>与<code>Hive</code>运行在同一台物理计算机或服务器上</td><td>元数据信息被存储在<code>MySQL</code>中，<code>MySQL</code>与<code>Hive</code>运行在不同物理计算机或服务器上</td></tr><tr><td>用于测试</td><td>用户开发与测试</td><td>用于实际生产环境</td></tr></tbody></table><h4 id="数据仓库的两个方面"><a href="#数据仓库的两个方面" class="headerlink" title="数据仓库的两个方面"></a>数据仓库的两个方面</h4><table><thead><tr><th>面向主题的</th><th>集成的</th></tr></thead><tbody><tr><td>这是一个面向主题的、集成的、不可更新的、随时间而变化的数据集合<br>用于支持企业或组织的决策分析处理</td><td>仓库中的数据来自分散的操作型数据，包含规范化以及非规范化的数据；它将所需数据从原来的信息中抽取出来，进行加工与集成、统一与综合，保证仓库信息的一致性；</td></tr></tbody></table><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li>学习成本低，开发灵活</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li><p>执行速度慢</p></li><li><p>不支持数据的更新、删除操作</p></li></ol><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><ul><li><p>介于<code>关系数据库</code>与<code>非关系数据库</code>之间的产品</p></li><li><p><mark>首先要先配置好Hadoop集群服务，才配置MongoDB服务</mark></p></li><li><p>仅在<code>Hadoop</code>集群的主节点上配置<code>MongoDB</code></p></li></ul><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h5><blockquote><p>是<code>MongoDB</code>中数据的基本单位，类似关系型数据库中的<code>行</code>（但比<code>行</code>复杂）</p><p>多个键及其关联的值有序的放在一起就构成了文档</p></blockquote><h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><blockquote><p>就是一组文档，类似关系型数据库中的<code>表</code>；</p></blockquote><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><blockquote><p>由多个文档组成集合，多个集合组成数据库</p></blockquote><h6 id="系统数据库"><a href="#系统数据库" class="headerlink" title="系统数据库"></a>系统数据库</h6><table><thead><tr><th align="center">Admin数据库</th><th align="center">Local数据库</th><th align="center">Config数据库</th></tr></thead><tbody><tr><td align="center">是一个权限数据库</td><td align="center">用于存储本地单台服务器的任意集合；不会被复制</td><td align="center">当使用分片模式时，用于保存分片的信息；仅在内部使用</td></tr></tbody></table><h5 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h5><blockquote><p>一个<code>MongoDB</code>实例可以包含一组数据库（Database）、一个数据库可以包含一组集合（Collection）、一个集合可以包含一组文档（Document）、一个文档可以包含一组字段（Field），每个字段都是一个键值对（Key&#x2F;Value pair）</p></blockquote><h4 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h4><table><thead><tr><th>1. 面向集合存储，易存储对象类型的数据</th><th>7. 使用高效的二进制数据存储，包括大型对象<br>(如视频等)</th></tr></thead><tbody><tr><td>2. 模式自由</td><td>8. 自动处理碎片，以支持云计算层次的扩展性</td></tr><tr><td>3. 支持动态查询</td><td>9. 支持<code>Ruby</code>、<code>Python</code>、<code>Java</code>、<code>C++</code>、<code>PHP</code>、<code>C#</code>等多种语言</td></tr><tr><td>4. 支持完全索引</td><td>10. 文件存储格式为BSON（JSON文件的一种扩展）</td></tr><tr><td>5. 支持查询</td><td>11. 可通过网络访问</td></tr><tr><td>6. 支持复制和故障恢复</td><td></td></tr></tbody></table><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><table><thead><tr><th>适用场景</th><th>不适用场景</th></tr></thead><tbody><tr><td>1. 网站实时数据处理</td><td>1. 要求高事务性的系统</td></tr><tr><td>2. 缓存</td><td>2. 传统的商业智能应用</td></tr><tr><td>3. 高伸缩性的场景</td><td>3. 复杂的跨文档（表）的级联查询</td></tr></tbody></table><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><blockquote><p>是一个分布式消息队列</p><ul><li><p>必须首先配置<code>Hadoop</code>、<code>ZooKeeper</code>集群服务</p></li><li><p><mark>依赖ZooKeeper服务</mark></p></li></ul></blockquote><ul><li>具有高性能、持久化、多副本备份、横向扩展能力</li></ul><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h5><blockquote><p><code>Kafka</code>集群中包含一个或多个服务器，这种服务器被称为<code>代理服务器</code>（Broker）或<code>Kafka</code>集群</p><ul><li>已发布的消息会保存在一组服务器中</li></ul></blockquote><h5 id="话题（Topic）"><a href="#话题（Topic）" class="headerlink" title="话题（Topic）"></a>话题（Topic）</h5><blockquote><p>是消息的<code>分类名</code></p></blockquote><h5 id="分区（Partition）"><a href="#分区（Partition）" class="headerlink" title="分区（Partition）"></a>分区（Partition）</h5><blockquote><p>是物理上的概念；每个话题包含一个或多个分区</p></blockquote><h5 id="生产者（Producer）"><a href="#生产者（Producer）" class="headerlink" title="生产者（Producer）"></a>生产者（Producer）</h5><blockquote><p>能够发布消息到<code>Kafka Broker</code>的任何对象</p></blockquote><h5 id="消费者（Consumer）"><a href="#消费者（Consumer）" class="headerlink" title="消费者（Consumer）"></a>消费者（Consumer）</h5><blockquote><p>是从<code>Kafka Broker</code>读取消息的客户端；可以订阅一个或多个话题</p></blockquote><h5 id="消费者组群"><a href="#消费者组群" class="headerlink" title="消费者组群"></a>消费者组群</h5><blockquote><p>为消费者进行分类；每个消费者属于一个特定的消费者组群；</p></blockquote><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><table><thead><tr><th>通过O(1)的磁盘数据结构提供消息的持久化</th></tr></thead><tbody><tr><td>高吞吐量</td></tr><tr><td>支持通过Kafka服务器和消费机集群来进行消息分区</td></tr><tr><td>支持Hadoop并行数据加载</td></tr></tbody></table><h3 id="Flume"><a href="#Flume" class="headerlink" title="Flume"></a>Flume</h3><ul><li>用于高效收集、聚合和移动大量且多数据源的日志数据</li></ul><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><table><thead><tr><th align="center">客户端（Client）</th><th align="center">运行在一个独立的线程中，会产生数据</th></tr></thead><tbody><tr><td align="center">事件（Event）</td><td align="center">对数据的一种封装，是一个数据单元；是<code>Flume</code>中传输数据最基本的单元</td></tr><tr><td align="center">代理（Agent）</td><td align="center">是<code>Flume</code>运行的核心；是<code>Flume</code>中最小的独立运行单位</td></tr><tr><td align="center">数据源（Source）</td><td align="center">是数据的收集端；负责从客户端手机捕获数据并进行格式化，随后将数据封装到<code>事件</code>里，最后将<code>事件</code>放到一个或多个通道中</td></tr><tr><td align="center">通道（Channel）</td><td align="center">是中转事件的一个临时存储，保存由<code>Source</code>组件传递过来的<code>事件</code></td></tr><tr><td align="center">沉槽（Sink）</td><td align="center">从<code>通道</code>中取出<code>事件</code>，负责将<code>事件</code>传输到下一跳或最终目的地</td></tr><tr><td align="center">Flume数据流</td><td align="center"></td></tr></tbody></table><h4 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h4><blockquote><p>使用事务的方式保证整个传输事件过程的可靠性</p></blockquote><ol><li><p>当<code>事件</code>被存入<code>Channel</code>后、或者被传到下一个<code>代理</code>后、或者被存入外部目的地后、<code>Sink</code>才允许吧<code>事件</code>从<code>Channel</code>中删除掉</p></li><li><p>当节点出现故障时，日志能够被传输到其他节点上，不会丢失</p></li></ol><p>由弱到强的可靠性保障：Besteffort<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="数据发送到接收方后，不进行确认">[1]</span></a></sup> ——&gt;  Store on Failure<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="当数据接收方崩溃时，将数据写到本地，等带接收方恢复后，再继续发送">[2]</span></a></sup> ——&gt; end-to-end<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="收到数据后，代理先将事件写到磁盘上，然后传送数据，传输成功后再删除数据；若失败，则重新发送">[3]</span></a></sup></p><h4 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h4><table><thead><tr><th>多个代理顺序连接</th><th>多个代理的数据汇聚到同一个代理</th><th>多级流</th></tr></thead><tbody><tr><td>可以将多个<code>Agent</code>顺序连接起来，将最初的数据源经过收集，存储到最终的存储系统中</td><td>将多个代理的数据汇聚到一个用来存储数据的存储系统</td><td>当多种日志流流入一个代理时，将混杂的日志流分开，为每种类型的日志建立一个自己的传输通道</td></tr></tbody></table><h3 id="Storm"><a href="#Storm" class="headerlink" title="Storm"></a>Storm</h3><blockquote><p>是一个分布式实时流式计算平台；</p><ul><li><p>必须首先配置<code>Hadoop</code>、<code>ZooKeeper</code>集群服务</p></li><li><p><mark>依赖ZooKeeper服务</mark></p></li><li><p>依靠<code>ZooKeeper</code>集群实现节点间的信息交换</p></li></ul></blockquote><h4 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h4><table><thead><tr><th>概念名</th><th>描述</th><th>作用</th></tr></thead><tbody><tr><td>Tuple</td><td>被处理的数据</td><td></td></tr><tr><td>Spout</td><td>数据源</td><td>一个<code>Topology</code>中的数据生产者</td></tr><tr><td>Bolt</td><td>数据操作</td><td>所有的数据处理都由<code>Bolt</code>完成</td></tr><tr><td>Task</td><td>运行于<code>Spout</code>或<code>Bolt</code>中的线程</td><td></td></tr><tr><td>Worker</td><td>运行<code>Task</code>线程的进程</td><td>具体处理组件逻辑的进程<br>负责实际的计算和网络通信</td></tr></tbody></table><h4 id="关键组件"><a href="#关键组件" class="headerlink" title="关键组件"></a>关键组件</h4><table><thead><tr><th>Topology</th><th>一个实时应用程序；<br>即各个组件间的消息流动形成逻辑上的一个拓扑结构</th></tr></thead><tbody><tr><td>Steam</td><td>以<code>Tuple</code>为单位组成的一条有向无界的数据流</td></tr><tr><td>Nimbus</td><td>负责管理<code>Supervisor</code>、调度<code>Topology</code></td></tr><tr><td>Supervisor</td><td>接收<code>Nimbus</code>发来的工作指派并基于要求运行工作进程</td></tr></tbody></table><h4 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h4><blockquote><p>采用主从架构</p><p>即，主节点<code>Nimbus</code>，从节点（工作节点）<code>Supervisor</code></p><ul><li>计算模型为<code>DAG</code>计算模型，<code>Spout</code>和<code>Bolt</code>节点在有向无环图李灵活组合构成<code>Stream</code>数据流，数据流以<code>Tuple</code>为基本的数据单元</li></ul></blockquote><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><table><thead><tr><th>流数据处理</th><th>可以处理源源不断的消息</th></tr></thead><tbody><tr><td>连续计算</td><td>可以进行连续查询并把结果即时反馈给客户</td></tr><tr><td>分布式</td><td>处理延迟极低</td></tr><tr><td>机器学习</td><td></td></tr><tr><td>实时分析</td><td>数据在内存中处理</td></tr></tbody></table><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li><p>常驻运行</p></li><li><p>流式处理（数据发一点处理一点）</p></li><li><p>实时处理（数据在内存中不写入磁盘）</p></li><li><p>DAG（Directed Acyclic Graph，有向无环图）模型</p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>《云计算与大数据技术(Linux网络平台+虚拟化技术+Hadoop数据运维)》·邢丽</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>数据发送到接收方后，不进行确认<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>当数据接收方崩溃时，将数据写到本地，等带接收方恢复后，再继续发送<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>收到数据后，代理先将事件写到磁盘上，然后传送数据，传输成功后再删除数据；若失败，则重新发送<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
      <tag>Hadoop</tag>
      
      <tag>ZooKeeper</tag>
      
      <tag>Kafka</tag>
      
      <tag>Spark</tag>
      
      <tag>Storm</tag>
      
      <tag>HBase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Word使用小技巧</title>
    <link href="/2024/11/13/Word%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2024/11/13/Word%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="需要在word中打“√”和“×”"><a href="#需要在word中打“√”和“×”" class="headerlink" title="需要在word中打“√”和“×”"></a>需要在word中打“√”和“×”</h1><ol><li>首先输入2611</li><li>随后按住<code>Alt</code>和<code>x</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">对应代码</span><br>2610 ——— ☐<br>2611 ——— ☑<br>2612 ——— ☒<br>2613 ——— ☓<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Office</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建分布式Hadoop集群（shell一键脚本）</title>
    <link href="/2024/11/10/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8FHadoop%E9%9B%86%E7%BE%A4%EF%BC%88shell%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%EF%BC%89/"/>
    <url>/2024/11/10/%E6%90%AD%E5%BB%BA%E5%88%86%E5%B8%83%E5%BC%8FHadoop%E9%9B%86%E7%BE%A4%EF%BC%88shell%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建分布式Hadoop集群（shell一键脚本）"><a href="#搭建分布式Hadoop集群（shell一键脚本）" class="headerlink" title="搭建分布式Hadoop集群（shell一键脚本）"></a>搭建分布式Hadoop集群（shell一键脚本）</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="1-首先安装三台及以上的centos服务器"><a href="#1-首先安装三台及以上的centos服务器" class="headerlink" title="1. 首先安装三台及以上的centos服务器"></a>1. 首先安装三台及以上的centos服务器</h3><blockquote><p>主机名随意取，只要便于区分节点的功能即可</p></blockquote><table><thead><tr><th>主机名</th><th>IP地址</th></tr></thead><tbody><tr><td>ha1</td><td>192.168.66.6</td></tr><tr><td>ha2</td><td>192.168.66.7</td></tr><tr><td>ha3</td><td>192.168.66.21</td></tr></tbody></table><blockquote><p>规划</p></blockquote><table><thead><tr><th align="center"></th><th align="center">ha1</th><th align="center">ha2</th><th align="center">ha3</th></tr></thead><tbody><tr><td align="center">HDFS</td><td align="center">NameNode<br>DataNode</td><td align="center">SecondaryNameNode<br>DataNode</td><td align="center">DataNode</td></tr><tr><td align="center">YARN</td><td align="center">NodeManager</td><td align="center">NodeManager</td><td align="center">ResourceManager<br>NodeManager</td></tr></tbody></table><h4 id="修改主机名-域名-与IP地址的映射关系"><a href="#修改主机名-域名-与IP地址的映射关系" class="headerlink" title="修改主机名(域名)与IP地址的映射关系"></a>修改主机名(域名)与IP地址的映射关系</h4><blockquote><p>这一步在三台（或更多）主机都需要执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"># ------hadoop 配置--------</span><br><span class="hljs-string">192.168.66.6 ha1 </span><br><span class="hljs-string">192.168.66.7 ha2 </span><br><span class="hljs-string">192.168.66.21 ha3 </span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="2-配置集群SSH免密钥登录"><a href="#2-配置集群SSH免密钥登录" class="headerlink" title="2. 配置集群SSH免密钥登录"></a>2. 配置集群SSH免密钥登录</h3><blockquote><p><strong>配置解释</strong></p><ol><li><p><code>ssh-keygen -t ed25519 -P &#39;&#39; -f ~/.ssh/id_ed25519</code></p><ul><li><p><code>ed25519</code> 表示生成一个ed25519类型的密钥</p><p>1.1 <code>rsa</code> - RSA密钥，这是SSH中最传统的密钥类型。默认长度是2048位，但推荐使用更长的密钥（例如3072位或4096位）以提高安全性。</p><p>1.2 <code>dsa</code> - DSA密钥，但这个选项已经不被推荐使用，因为它被认为不够安全。</p><p>1.3 <code>ecdsa</code> - ECDSA（椭圆曲线数字签名算法）密钥，提供了比RSA更好的性能和安全性。它支持不同的曲线，如<code>nistp256</code>（默认）、<code>nistp384</code>和<code>nistp521</code>。</p><p>1.4 <code>ed25519</code> - Ed25519密钥，这是目前推荐使用的密钥类型，因为它提供了非常好的性能和安全性。</p></li><li><p><code>-P &#39;&#39;</code> 表示生成密钥时不需要密码（空密码）</p></li><li><p><code>-f ~/.ssh/id_ed25519</code> 指定生成的私钥和公钥文件的路径和文件名</p></li></ul></li><li><p><code>ssh-copy-id 192.168.66.6</code></p><ul><li>这个命令将本地的公钥复制到远程服务器<code>192.168.66.6</code>的<code>~/.ssh/authorized_keys</code>文件中，从而允许无密码SSH登录到该服务器</li></ul></li></ol><p>执行这些命令时，系统可能会提示你输入远程服务器的密码，以完成公钥的复制过程。一旦完成，你就可以从本地机器无密码SSH登录到指定的远程服务器</p></blockquote><h4 id="2-1-在ha1节点上执行"><a href="#2-1-在ha1节点上执行" class="headerlink" title="2.1 在ha1节点上执行"></a>2.1 在ha1节点上执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-kegen -t ed25519 -P <span class="hljs-string">&#x27;&#x27;</span> -f ~/.ssh/id_ed25519<br>ssh-copy-id 192.168.66.6<br>ssh-copy-id 192.168.66.7<br>ssh-copy-id 192.168.66.21<br></code></pre></td></tr></table></figure><h4 id="2-2-在ha2节点上执行"><a href="#2-2-在ha2节点上执行" class="headerlink" title="2.2 在ha2节点上执行"></a>2.2 在ha2节点上执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-kegen -t ed25519 -P <span class="hljs-string">&#x27;&#x27;</span> -f ~/.ssh/id_ed25519<br>ssh-copy-id 192.168.66.6<br>ssh-copy-id 192.168.66.7<br>ssh-copy-id 192.168.66.21<br></code></pre></td></tr></table></figure><h4 id="2-3-在ha3上执行"><a href="#2-3-在ha3上执行" class="headerlink" title="2.3 在ha3上执行"></a>2.3 在ha3上执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-kegen -t ed25519 -P <span class="hljs-string">&#x27;&#x27;</span> -f ~/.ssh/id_ed25519<br>ssh-copy-id 192.168.66.6<br>ssh-copy-id 192.168.66.7<br>ssh-copy-id 192.168.66.21<br></code></pre></td></tr></table></figure><h3 id="3-安装JDK"><a href="#3-安装JDK" class="headerlink" title="3. 安装JDK"></a>3. 安装JDK</h3><blockquote><p>这一步，首先在ha1上做，随后通过工具将更改的文件同步到另外几台机器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/module<br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 下载Openjdk 8</span><br>wget -c https://mirrors.tuna.tsinghua.edu.cn/Adoptium/8/jdk/x64/linux/OpenJDK8U-jdk_x64_linux_hotspot_8u432b06.tar.gz<br>tar -zxvf /tmp/OpenJDK8U-jdk_x64_linux_hotspot_8u432b06.tar.gz -C /opt/module<br><span class="hljs-comment"># 设置系统级shell环境变量</span><br><span class="hljs-built_in">cat</span> &gt;&gt; /etc/profile &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"># JAVA_HOME</span><br><span class="hljs-string">export JAVA_HOME=/opt/module/jdk8u432-b06</span><br><span class="hljs-string">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment"># 使变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="4-设置root用户环境变量"><a href="#4-设置root用户环境变量" class="headerlink" title="4. 设置root用户环境变量"></a>4. 设置root用户环境变量</h3><blockquote><ul><li><p>同样，首先在ha1上做，随后通过工具将更改的文件同步到另外几台机器</p></li><li><p>hadoop通常不建议以root用户身份来启动服务，因为这可能会导致安全漏洞</p></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> &gt;&gt; /etc/profile &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">export HDFS_NAMENODE_USER=root</span><br><span class="hljs-string">export HDFS_DATANODE_USER=root</span><br><span class="hljs-string">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="hljs-string">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="hljs-string">export YARN_NODEMANAGER_USER=root</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 使变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="5-同步所需的文件"><a href="#5-同步所需的文件" class="headerlink" title="5. 同步所需的文件"></a>5. 同步所需的文件</h3><blockquote><p>根据自己的情况，更改主机名，或使用IP地址</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 同步到ha2机器</span><br>scp -r /opt/* root@ha2:/opt/<br>scp /etc/profile root@ha2:/etc/<br><span class="hljs-comment"># 同步到ha3机器</span><br>scp -r /opt/* root@ha3:/opt/<br>scp /etc/profile root@ha3:/etc/<br><span class="hljs-comment"># 在ha2上加载环境变量</span><br>ssh ha2 <span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-comment"># 在ha3上加载环境变量</span><br>ssh ha3 <span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h2 id="一键脚本安装正式开始"><a href="#一键脚本安装正式开始" class="headerlink" title="一键脚本安装正式开始"></a>一键脚本安装正式开始</h2><h3 id="6-复制粘贴脚本"><a href="#6-复制粘贴脚本" class="headerlink" title="6. 复制粘贴脚本"></a>6. 复制粘贴脚本</h3><blockquote><p>将以下脚本内容复制并保存到&#x2F;tmp&#x2F;install_hadoop_cluster.sh文件</p><ul><li>只需要更改第4-6行中IP地址的内容</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 设置3个节点的主机名或ip地址，修改为自己的</span><br>host_node1=192.168.145.103<br>host_node2=192.168.145.104<br>host_node3=192.168.145.105<br><br><span class="hljs-comment"># 安装版本</span><br>zk_version=<span class="hljs-string">&quot;3.1.3&quot;</span><br><span class="hljs-comment"># 安装目录</span><br>zk_installDir=<span class="hljs-string">&quot;/opt/module/hadoop&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">install_hadoop</span></span>() &#123;<br>  <span class="hljs-built_in">local</span> version=<span class="hljs-variable">$1</span><br>  <span class="hljs-built_in">local</span> installDir=<span class="hljs-variable">$2</span><br>  <span class="hljs-built_in">local</span> node1=<span class="hljs-variable">$3</span><br>  <span class="hljs-built_in">local</span> node2=<span class="hljs-variable">$4</span><br>  <span class="hljs-built_in">local</span> node3=<span class="hljs-variable">$5</span><br><br>  <span class="hljs-comment"># 下载地址</span><br>  <span class="hljs-built_in">local</span> downloadUrl=<span class="hljs-string">&quot;https://archive.apache.org/dist/hadoop/common/hadoop-<span class="hljs-variable">$version</span>/hadoop-<span class="hljs-variable">$version</span>.tar.gz&quot;</span><br>  <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-subst">$(command -v wget)</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">sudo</span> yum install -y wget<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;wget安装完成&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$JAVA_HOME</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;JAVA_HOME未设置，请安装jdk1.8，设置Java环境变量再来执行此脚本&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;installDir&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;installDir&#125;</span>&quot;</span><br>    <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装目录<span class="hljs-variable">$&#123;installDir&#125;</span>已创建&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请确保您有足够的权限来创建目录，请增加权限后再次执行&quot;</span><br>      <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">if</span> [ ! -f /tmp/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span>.tar.gz ] ; <span class="hljs-keyword">then</span><br>    wget <span class="hljs-string">&quot;<span class="hljs-variable">$downloadUrl</span>&quot;</span> -P /tmp<br>    <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hadoop-<span class="hljs-variable">$version</span>.tar.gz下载成功&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hadoop-<span class="hljs-variable">$version</span>.tar.gz下载失败，请重试或手动下载到/tmp目录下再次执行&quot;</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;下载地址：<span class="hljs-variable">$downloadUrl</span>&quot;</span><br>      <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/tmp/hadoop-<span class="hljs-variable">$version</span>.tar.gz文件已存在&quot;</span><br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;installDir&#125;</span>&quot;</span>/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;installDir&#125;</span>/hadoop-<span class="hljs-variable">$version</span> 已存在，正在删除...&quot;</span><br>    <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;installDir&#125;</span>&quot;</span>/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  tar -zxvf /tmp/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span>.tar.gz -C <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;installDir&#125;</span>&quot;</span><br>  <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/tmp/hadoop-<span class="hljs-variable">$version</span>.tar.gz解压成功&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/tmp/hadoop-<span class="hljs-variable">$version</span>.tar.gz解压失败，请查看异常信息后重试&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$HADOOP_HOME</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-comment"># 设置hadoop用户环境变量</span><br>    <span class="hljs-built_in">echo</span> &gt;&gt; ~/.bashrc<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;#HADOOP_HOME&#x27;</span> &gt;&gt; ~/.bashrc<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export HADOOP_HOME=<span class="hljs-variable">$&#123;installDir&#125;</span>/hadoop-<span class="hljs-variable">$&#123;version&#125;</span>&quot;</span> &gt;&gt; ~/.bashrc<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=$PATH:$HADOOP_HOME/bin&#x27;</span> &gt;&gt; ~/.bashrc<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=$PATH:$AHDOOP_HOME/sbin&#x27;</span> &gt;&gt; ~/.bashrc<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;HADOOP_HOME已有设置：<span class="hljs-variable">$HADOOP_HOME</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-comment"># 配置hadoop</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;配置hadoop...&quot;</span><br>  coresite=<span class="hljs-string">&quot;\</span><br><span class="hljs-string">  &lt;configuration&gt;\n\</span><br><span class="hljs-string">      &lt;!--指定NameNode的地址--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;fs.defaultFS&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;hdfs://<span class="hljs-variable">$node1</span>:8020&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">      &lt;!--指定hadoop数据的存储目录--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;<span class="hljs-variable">$installDir</span>/hadoop-<span class="hljs-variable">$version</span>/data&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">      &lt;!-- 配置访问hadoop的权限，能够让hive访问到 --&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;*&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;hadoop.proxyuser.root.users&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;*&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">  &lt;/configuration&gt;\</span><br><span class="hljs-string">  &quot;</span><br>  hdfssite=<span class="hljs-string">&quot;\</span><br><span class="hljs-string">  &lt;configuration&gt;\n\</span><br><span class="hljs-string">      &lt;!-- namenode web端访问地址--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;dfs.namenode.http-address&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;<span class="hljs-variable">$node1</span>:9870&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">      &lt;!-- secondarynamenode web端访问地址--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;<span class="hljs-variable">$node3</span>:9868&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">        &lt;name&gt;dfs.permissions.enabled&lt;/name&gt;\n\</span><br><span class="hljs-string">        &lt;value&gt;false&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">  &lt;/configuration&gt;\</span><br><span class="hljs-string">  &quot;</span><br>  mapredsite=<span class="hljs-string">&quot;\</span><br><span class="hljs-string">  &lt;configuration&gt;\n\</span><br><span class="hljs-string">      &lt;!--指定MapReduce程序运行在Yarn上--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;mapreduce.framework.name&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;yarn&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">       &lt;!--历史服务器端地址--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;<span class="hljs-variable">$node2</span>:10020&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">      &lt;!--历史服务器web端地址--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;<span class="hljs-variable">$node2</span>:19888&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">  &lt;/configuration&gt;\</span><br><span class="hljs-string">  &quot;</span><br>  yarnsite=<span class="hljs-string">&quot;\</span><br><span class="hljs-string">  &lt;configuration&gt;\n\</span><br><span class="hljs-string">      &lt;!--指定MR走shuffle --&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;mapreduce_shuffle&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">      &lt;!--指定ResourceManager的地址--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;<span class="hljs-variable">$node2</span>&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">      &lt;!--环境变量的继承--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;yarn.nodemanager.env-whitelist&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">      &lt;!--开启日志聚集功能--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;true&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">      &lt;!--设置日志聚集服务器地址--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;yarn.log.server.url&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;http://<span class="hljs-variable">$node2</span>:19888/jobhistory/logs&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">      &lt;!--设置日志保留时间为7天--&gt;\n\</span><br><span class="hljs-string">      &lt;property&gt;\n\</span><br><span class="hljs-string">          &lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt;\n\</span><br><span class="hljs-string">          &lt;value&gt;604800&lt;/value&gt;\n\</span><br><span class="hljs-string">      &lt;/property&gt;\n\</span><br><span class="hljs-string">  &lt;/configuration&gt;\</span><br><span class="hljs-string">  &quot;</span><br>  sed -i <span class="hljs-string">&#x27;/&lt;configuration&gt;/,/&lt;\/configuration&gt;/c &#x27;</span><span class="hljs-string">&quot;<span class="hljs-variable">$coresite</span>&quot;</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$installDir</span>&quot;</span>/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span>/etc/hadoop/core-site.xml<br>  sed -i <span class="hljs-string">&#x27;/&lt;configuration&gt;/,/&lt;\/configuration&gt;/c &#x27;</span><span class="hljs-string">&quot;<span class="hljs-variable">$hdfssite</span>&quot;</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$installDir</span>&quot;</span>/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span>/etc/hadoop/hdfs-site.xml<br>  sed -i <span class="hljs-string">&#x27;/&lt;configuration&gt;/,/&lt;\/configuration&gt;/c &#x27;</span><span class="hljs-string">&quot;<span class="hljs-variable">$mapredsite</span>&quot;</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$installDir</span>&quot;</span>/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span>/etc/hadoop/mapred-site.xml<br>  sed -i <span class="hljs-string">&#x27;/&lt;configuration&gt;/,/&lt;\/configuration&gt;/c &#x27;</span><span class="hljs-string">&quot;<span class="hljs-variable">$yarnsite</span>&quot;</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$installDir</span>&quot;</span>/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span>/etc/hadoop/yarn-site.xml<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$node1</span>&quot;</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$installDir</span>&quot;</span>/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span>/etc/hadoop/workers<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$node2</span>&quot;</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$installDir</span>&quot;</span>/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span>/etc/hadoop/workers<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$node3</span>&quot;</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$installDir</span>&quot;</span>/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span>/etc/hadoop/workers<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hadoop的配置文件：core-site.xml、hdfs-site.xml、mapred-site.xml、yarn-site.xml都已配置完成&quot;</span><br><br>  <span class="hljs-built_in">local</span> ip_addr=$(ip addr | grep <span class="hljs-string">&#x27;inet &#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>| <span class="hljs-built_in">tail</span> -n 1 | grep -oP <span class="hljs-string">&#x27;\d+\.\d+\.\d+\.\d+&#x27;</span>)<br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$node1</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-subst">$(hostname)</span>&quot;</span> || <span class="hljs-string">&quot;<span class="hljs-variable">$node1</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$ip_addr</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-string">&quot;<span class="hljs-variable">$installDir</span>&quot;</span>/hadoop-<span class="hljs-string">&quot;<span class="hljs-variable">$version</span>&quot;</span>/bin/hdfs namenode -format<br>    <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;格式化namenode成功&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;格式化namenode失败&quot;</span><br>      <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-comment">#  rm -rf /tmp/hadoop-&quot;$version&quot;.tar.gz</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hadoop下载、安装、配置完成&quot;</span><br>&#125;<br><br>install_hadoop <span class="hljs-string">&quot;<span class="hljs-variable">$zk_version</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$zk_installDir</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$host_node1</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$host_node2</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$host_node3</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="7-增加执行权限"><a href="#7-增加执行权限" class="headerlink" title="7. 增加执行权限"></a>7. 增加执行权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x /tmp/install_hadoop_cluster.sh<br></code></pre></td></tr></table></figure><h3 id="8-分发脚本"><a href="#8-分发脚本" class="headerlink" title="8.分发脚本"></a>8.分发脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 分发脚本到ha2</span><br>scp /tmp/install_hadoop_cluster.sh ha2:/tmp<br><span class="hljs-comment"># 分发脚本到ha3</span><br>scp /tmp/install_hadoop_cluster.sh ha3:/tmp<br></code></pre></td></tr></table></figure><h3 id="9-执行脚本"><a href="#9-执行脚本" class="headerlink" title="9. 执行脚本"></a>9. 执行脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在ha1上执行</span><br>/tmp/install_hadoop_cluster.sh<br><span class="hljs-comment"># 在ha2上执行</span><br>ssh ha2 /tmp/install_hadoop_cluster.sh<br><span class="hljs-comment"># 在ha3上执行</span><br>ssh ha3 /tmp/install_hadoop_cluster.sh<br></code></pre></td></tr></table></figure><blockquote><p>安装配置完成会有提示，如有异常，请查看提示或报错信息</p></blockquote><h3 id="10-加载hadoop环境变量"><a href="#10-加载hadoop环境变量" class="headerlink" title="10. 加载hadoop环境变量"></a>10. 加载hadoop环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在ha1上加载环境变量</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-comment"># 在ha1上加载环境变量</span><br>ssh ha2 <span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-built_in">exit</span><br><span class="hljs-comment"># 在ha1上加载环境变量</span><br>ssh ha3 <span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h3 id="11-一键启停hadoop集群脚本"><a href="#11-一键启停hadoop集群脚本" class="headerlink" title="11. 一键启停hadoop集群脚本"></a>11. 一键启停hadoop集群脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建文件</span><br>mkdir ~/bin<br>touch ~/bin/hadoop.sh<br></code></pre></td></tr></table></figure><blockquote><p>将以下脚本内容复制并保存为<code>~/bin/hadoop.sh</code>文件</p><ul><li><p>并根据自己的情况，将<code>hadoop_home</code>改为自己需要的安装目录</p></li><li><p>同时同居自己的情况，将6-8行的IP地址更改为自己的IP地址或主机名</p></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置hadoop安装目录</span><br>HADOOP_HOME=&quot;/opt/module/hadoop/hadoop-3.1.3&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">集群节点</span><br>node1=192.168.145.103<br>node2=192.168.145.104<br>node3=192.168.145.105<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动hadoop</span><br>start_hadoop() &#123;<br>  ssh $node1 &quot;$HADOOP_HOME/sbin/start-dfs.sh&quot;<br>  ssh $node2 &quot;$HADOOP_HOME/sbin/start-yarn.sh&quot;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止hadoop</span><br>stop_hadoop() &#123;<br>  ssh $node1 &quot;$HADOOP_HOME/sbin/stop-dfs.sh&quot;<br>  ssh $node2 &quot;$HADOOP_HOME/sbin/stop-yarn.sh&quot;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启hadoop</span><br>restart_hadoop() &#123;<br>  ssh $node1 &quot;$HADOOP_HOME/sbin/stop-dfs.sh&quot;<br>  ssh $node2 &quot;$HADOOP_HOME/sbin/stop-yarn.sh&quot;<br>  sleep 3<br>  ssh $node1 &quot;$HADOOP_HOME/sbin/start-dfs.sh&quot;<br>  ssh $node2 &quot;$HADOOP_HOME/sbin/start-yarn.sh&quot;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据命令行参数执行相应操作</span><br>case &quot;$1&quot; in<br>start)<br>  start_hadoop<br>  ;;<br>stop)<br>  stop_hadoop<br>  ;;<br>restart)<br>  restart_hadoop<br>  ;;<br>*)<br>  echo &quot;Usage: $0 &#123;start|stop|restart&#125;&quot;<br>  exit 1<br>  ;;<br>esac<br><br>exit 0<br></code></pre></td></tr></table></figure><h3 id="12-增加脚本执行权限"><a href="#12-增加脚本执行权限" class="headerlink" title="12. 增加脚本执行权限"></a>12. 增加脚本执行权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x ~/bin/hadoop.sh<br></code></pre></td></tr></table></figure><h3 id="13-启动hadoop集群"><a href="#13-启动hadoop集群" class="headerlink" title="13. 启动hadoop集群"></a>13. 启动hadoop集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动集群</span><br>hadoop.sh start<br><span class="hljs-comment"># 暂停集群</span><br>hadoop.sh stop<br><span class="hljs-comment"># 重启集群</span><br>hadoop.sh restart<br></code></pre></td></tr></table></figure><h3 id="14-关闭防火墙（可选）"><a href="#14-关闭防火墙（可选）" class="headerlink" title="14. 关闭防火墙（可选）"></a>14. 关闭防火墙（可选）</h3><blockquote><p>生产环境仅仅需要放通需要的端口即可，不需要关闭防火墙</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在ha1上停止防火</span><br>systemctl stop firewalld<br><span class="hljs-comment"># 在ha2上停止防火墙</span><br>ssh ha2 systemctl stop firewalld<br><span class="hljs-comment"># 在ha3上停止防火墙</span><br>ssh ha3 systemctl stop firewalld<br></code></pre></td></tr></table></figure><h3 id="15-浏览器访问"><a href="#15-浏览器访问" class="headerlink" title="15. 浏览器访问"></a>15. 浏览器访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">访问HDFS；地址：http://192.168.66.6:9870/<br><br>这个地址是node1的IP地址，端口号是9870<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">访问Yarn；地址：http://192.168.7:8088/<br><br>这个地址是node2的IP地址，端口号是8088<br></code></pre></td></tr></table></figure><hr><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><p><a href="https://blog.csdn.net/zcs2312852665/article/details/136545879">hadoop集群部署教程_hadoop部署-CSDN博客</a></p></li><li><p><a href="https://blog.csdn.net/zcs2312852665/article/details/134810782">hadoop安装与配置-shell脚本一键安装配置（集群版）_急速完成hadoop按照-CSDN博客</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
      <tag>Hadoop</tag>
      
      <tag>云计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PVE优化</title>
    <link href="/2024/11/08/bat%E6%89%B9%E5%A4%84%E7%90%86%E4%B8%ADfor%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2024/11/08/bat%E6%89%B9%E5%A4%84%E7%90%86%E4%B8%ADfor%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="打开cmd"><a href="#打开cmd" class="headerlink" title="打开cmd"></a>打开cmd</h1><blockquote><p>for &#x2F;l：即for循环以增量形式运行<br>%a：即a是变量<br>(0,2,10)：初始值是0，增量是2，终止值是10</p></blockquote><h2 id="windows下批量复制文件"><a href="#windows下批量复制文件" class="headerlink" title="windows下批量复制文件"></a>windows下批量复制文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs batch">for /l  %a  in (0,2,10) do copy 源文件  目的文件%a <br><br></code></pre></td></tr></table></figure><h2 id="批量更改名字"><a href="#批量更改名字" class="headerlink" title="批量更改名字"></a>批量更改名字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">for /l %a (1,1,10) do move 源文件  目的文件%a<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">for /l %a (1.1.10) do ren 源文件 目的文件%a<br></code></pre></td></tr></table></figure><h2 id="windows-创建目录"><a href="#windows-创建目录" class="headerlink" title="windows 创建目录"></a>windows 创建目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">md 目录名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Openeular(20.03-LTS)安装《Discuz!论坛》</title>
    <link href="/2024/11/03/Openeular(20.03LTS)%E5%AE%89%E8%A3%85%E3%80%8ADiscuz!%E8%AE%BA%E5%9D%9B%E3%80%8B/"/>
    <url>/2024/11/03/Openeular(20.03LTS)%E5%AE%89%E8%A3%85%E3%80%8ADiscuz!%E8%AE%BA%E5%9D%9B%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Openeular-20-03-LTS-安装《Discuz-论坛》"><a href="#Openeular-20-03-LTS-安装《Discuz-论坛》" class="headerlink" title="Openeular(20.03-LTS)安装《Discuz!论坛》"></a>Openeular(20.03-LTS)安装《Discuz!论坛》</h1><h2 id="1-设置主机名"><a href="#1-设置主机名" class="headerlink" title="1. 设置主机名"></a>1. 设置主机名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hostnamectl set-hostname xxx &amp;&amp; exit<br></code></pre></td></tr></table></figure><h2 id="2-设置静态IP地址"><a href="#2-设置静态IP地址" class="headerlink" title="2. 设置静态IP地址"></a>2. 设置静态IP地址</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/sysconfig/network-scripts &amp;&amp; ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">会显示类似如下的文件名</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[root@openeular network-scripts]# <span class="hljs-built_in">ls</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ifcfg-有线连接  ifcfg-ens18</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看拥有的网卡</span><br>ip address<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加新加网卡的配置文件，根据自己的情况填写对应的ens数字</span><br>nmcli connection add type ethernet ifname ens19 con-name ens19<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看新加的配置文件，并修改为静态IP地址</span><br>ls <br>vi ifcfg-ens19<br><span class="hljs-meta prompt_"># </span><span class="language-bash">根据自己情况修改内容</span><br>BOOTPROTO=dhcp -&gt; BOOTPROTO=static # 将网卡的启动协议变为静态设置IP地址<br><span class="hljs-meta prompt_"># </span><span class="language-bash">需要再文件最后添加的内容</span><br>IPADDR=192.168.66.11 # 静态设置的IP地址<br>NETMASK=255.255.255.0 # 设置IP地址的子网掩码<br><span class="hljs-meta prompt_"># </span><span class="language-bash">写完，保存退出</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开启并查看网卡</span><br>nmcli connection up ens19 &amp;&amp; nmcli connection show <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看网卡配置</span><br>ip address<br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试正常上网功能</span><br>ping www.baidu.com<br></code></pre></td></tr></table></figure><h2 id="3-安装vim以及解压缩软件"><a href="#3-安装vim以及解压缩软件" class="headerlink" title="3. 安装vim以及解压缩软件"></a>3. 安装vim以及解压缩软件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y vim unzip<br></code></pre></td></tr></table></figure><h2 id="4-关闭系统防火墙"><a href="#4-关闭系统防火墙" class="headerlink" title="4. 关闭系统防火墙"></a>4. 关闭系统防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看防火墙状态</span><br>systemctl status firewalld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁止防火墙开机自启动</span><br>systemctl disable firewalld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">再次查看防火墙状态是否关闭</span><br>systemctl status firewalld<br></code></pre></td></tr></table></figure><h2 id="5-关闭Selinux【Linux安全内核功能】"><a href="#5-关闭Selinux【Linux安全内核功能】" class="headerlink" title="5. 关闭Selinux【Linux安全内核功能】"></a>5. 关闭Selinux【Linux安全内核功能】</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看selinux状态</span><br>getenforce<br><span class="hljs-meta prompt_"># </span><span class="language-bash">不关闭会打印出以下内容；</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Enforcing</span><br>cd /etc/selinux &amp;&amp; vi config<br>将 SELINUX=enforcing 改为 ---&gt; SELINUX=disabled<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启主机后，再次查看selinux状态</span><br>getenforce<br><span class="hljs-meta prompt_"># </span><span class="language-bash">此时，打印出以下内容</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Disabled</span><br></code></pre></td></tr></table></figure><h2 id="6-安装并配置LAMP环境【Linux，Apache，Mysql，PHP（JAVA环境）】"><a href="#6-安装并配置LAMP环境【Linux，Apache，Mysql，PHP（JAVA环境）】" class="headerlink" title="6. 安装并配置LAMP环境【Linux，Apache，Mysql，PHP（JAVA环境）】"></a>6. 安装并配置LAMP环境【Linux，Apache，Mysql，PHP（JAVA环境）】</h2><h3 id="6-1-安装并配置Apache服务"><a href="#6-1-安装并配置Apache服务" class="headerlink" title="6.1 安装并配置Apache服务"></a>6.1 安装并配置Apache服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装Apache服务</span><br>yum install -y httpd<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开启httpd服务</span><br>systemctl start httpd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看httpd服务状态</span><br>systemctl status htpd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">让httpd服务开机自启</span><br>systemctl enable httpd<br></code></pre></td></tr></table></figure><h3 id="6-2-安装并配置PHP服务"><a href="#6-2-安装并配置PHP服务" class="headerlink" title="6.2 安装并配置PHP服务"></a>6.2 安装并配置PHP服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装PHP以及PHP函数拓展服务</span><br>yum install -y php php-mysqlnd php-xml php-json<br></code></pre></td></tr></table></figure><h3 id="6-3-安装并配置Mysql数据库服务"><a href="#6-3-安装并配置Mysql数据库服务" class="headerlink" title="6.3 安装并配置Mysql数据库服务"></a>6.3 安装并配置Mysql数据库服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装mysql数据库服务</span><br>yum install -y mysql-server<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">开启数据库服务</span><br>systemctl start mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看数据库服务状态</span><br>systemctl status mysqld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">让数据库服务开机自启</span><br>systemctl enable mysqld<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">首次登录数据库</span><br>mysql -v<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改root密码，密码是”BY“后面单引号中间的内容，随意填写，需要自己记得住</span><br>ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Huawei@123!&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出数据库</span><br>exit<br></code></pre></td></tr></table></figure><h2 id="7-将Discuz论坛的压缩包上传至-var-www-html-这个文件夹内"><a href="#7-将Discuz论坛的压缩包上传至-var-www-html-这个文件夹内" class="headerlink" title="7. 将Discuz论坛的压缩包上传至&#x2F;var&#x2F;www&#x2F;html&#x2F;这个文件夹内"></a>7. 将Discuz论坛的压缩包上传至&#x2F;var&#x2F;www&#x2F;html&#x2F;这个文件夹内</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过XFTP这个工具上传</span><br></code></pre></td></tr></table></figure><h2 id="8-解压Discuz论坛的压缩包，并赋予权限"><a href="#8-解压Discuz论坛的压缩包，并赋予权限" class="headerlink" title="8. 解压Discuz论坛的压缩包，并赋予权限"></a>8. 解压Discuz论坛的压缩包，并赋予权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将Discuz论坛压缩包，解压到/mnt文件夹下</span><br>unzip -d /mnt /root/Discuz_X3.5_SC_UTF8_20240520.zip<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入/mnt文件夹，并将“upload”中所有的文件，复制到”/var/www/html“这个目录下</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;upload&quot;</span>这个文件夹中的内容，就是Discuz论坛的资源文件</span><br>cd /mnt<br>cp -R upload/* /var/www/html/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将“/var/www/html”这个目录下所有文件的写入权限赋予给其他人</span><br>chmod -R 777 /var/www/html<br></code></pre></td></tr></table></figure><h2 id="9-重启httpd服务"><a href="#9-重启httpd服务" class="headerlink" title="9. 重启httpd服务"></a>9. 重启httpd服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重启httpd服务</span><br>systemctl restart httpd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看httpd服务的状态</span><br>systemctl status httpd<br></code></pre></td></tr></table></figure><h2 id="10-配置Discuz论坛"><a href="#10-配置Discuz论坛" class="headerlink" title="10. 配置Discuz论坛"></a>10. 配置Discuz论坛</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">访问  ”http://IP地址/install“<br></code></pre></td></tr></table></figure><ul><li>此处的三个项，必须都是绿色勾，下一步</li></ul><img src="/img/assets/2024-11-03-00-45-57-image.png" title="" alt="" data-align="inline"><ul><li>选择仅安装Discuz论坛</li></ul><p><img src="/img/assets/2024-11-03-00-46-32-image.png"></p><h2 id="11-登录并创建Discuz数据库"><a href="#11-登录并创建Discuz数据库" class="headerlink" title="11. 登录并创建Discuz数据库"></a>11. 登录并创建Discuz数据库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登录mysql数据库，使用root账户，使用密码登录</span><br>mysql -u root -p   # 敲回车后输入你刚刚设置的root密码，密码不会显示出来<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前所有的数据库</span><br>show databases;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据库</span><br>create database discuz;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看创建后所有的数据库</span><br>show databases;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建论坛用户“Discuz”并附带账户密码，“BY”后面单引号中的内容就是密码</span><br>CREATE USER &#x27;Discuz&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">授予账户访问权限</span><br>GRANT ALL PRIVILEGES ON *.* TO &#x27;Discuz&#x27;@&#x27;%&#x27;;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">刷新权限</span><br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><h2 id="12-填写主机IP，以及刚刚创建的数据库，数据库用户名，数据库密码"><a href="#12-填写主机IP，以及刚刚创建的数据库，数据库用户名，数据库密码" class="headerlink" title="12. 填写主机IP，以及刚刚创建的数据库，数据库用户名，数据库密码"></a>12. 填写主机IP，以及刚刚创建的数据库，数据库用户名，数据库密码</h2><p><img src="/img/assets/2024-11-03-00-55-41-image.png"></p><h2 id="13-填写论坛web的“admin管理员”密码"><a href="#13-填写论坛web的“admin管理员”密码" class="headerlink" title="13. 填写论坛web的“admin管理员”密码"></a>13. 填写论坛web的“admin管理员”密码</h2><p><img src="/img/assets/2024-11-03-00-56-26-image.png"></p><h2 id="14-注册用户"><a href="#14-注册用户" class="headerlink" title="14. 注册用户"></a>14. 注册用户</h2><p><img src="/img/assets/2024-11-03-00-58-17-image.png"></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流氓之搜狗输入法</title>
    <link href="/2024/11/03/%E6%B5%81%E6%B0%93%E4%B9%8B%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <url>/2024/11/03/%E6%B5%81%E6%B0%93%E4%B9%8B%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>右键回收站的时候，会出现一个“彻底粉碎文件”的东西出现在列表中</p><p><img src="/img/assets/3057343520.png"></p><h1 id="搜狗输入法会在后台偷偷安装一个名为磁盘管理的应用，都是流氓，你怎么这么流氓，比流氓还流氓！！！！"><a href="#搜狗输入法会在后台偷偷安装一个名为磁盘管理的应用，都是流氓，你怎么这么流氓，比流氓还流氓！！！！" class="headerlink" title="搜狗输入法会在后台偷偷安装一个名为磁盘管理的应用，都是流氓，你怎么这么流氓，比流氓还流氓！！！！"></a>搜狗输入法会在后台偷偷安装一个名为磁盘管理的应用，都是流氓，你怎么这么流氓，比流氓还流氓！！！！</h1><h2 id="删除以及完全清除"><a href="#删除以及完全清除" class="headerlink" title="删除以及完全清除"></a>删除以及完全清除</h2><p>该软件的安装路径为：“用户文件夹\AppData\Local\kdiskmgr_sogou”，如下图所示</p><p><img src="/img/assets/435009471.png"></p><p>运行“uninstall.exe”卸载后，将“kdiskmgr_sogou”这个文件夹强制删除</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/DearPhotographer/article/details/143212705">https://blog.csdn.net/DearPhotographer/article/details/143212705</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>输入法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSHpass工具</title>
    <link href="/2024/11/01/SSHpass%E5%B7%A5%E5%85%B7/"/>
    <url>/2024/11/01/SSHpass%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sshpass -p &#x27;123456&#x27; ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt test@127.0.0.1  &quot;exit&quot; &amp;<br></code></pre></td></tr></table></figure><h1 id="命令参数解释"><a href="#命令参数解释" class="headerlink" title="命令参数解释"></a>命令参数解释</h1><p>sshpass -p：这是将ssh密码作为参数传递给ssh命令，免去手动输入ssh密码的麻烦；</p><p>ssh：这是用来安全地访问远程服务器的命令；</p><p>-o StrictHostKeyChecking&#x3D;no：这个选项告诉SSH在连接到新的或未知的主机时，不需要进行严格的主机密钥检查。这意味着SSH不会在~&#x2F;.ssh&#x2F;known_hosts文件中检查远程主机的公钥，并且不会提示用户确认是否信任该主机。这可以提高自动化脚本的灵活性，但会降低安全性，因为它使SSH连接更容易受到中间人攻击；</p><p>-o UserKnownHostsFile&#x3D;&#x2F;dev&#x2F;null：这个选项指定了SSH用于存储已知主机密钥的文件。在这个例子中，它被设置为&#x2F;dev&#x2F;null，这意味着所有已知的主机信息都会被丢弃，SSH不会存储任何关于连接过的主机的信息。这进一步降低了安全性，因为它消除了主机密钥验证的任何痕迹；</p><p>-tt：这个选项强制SSH分配一个伪终端。即使执行的命令是非交互式的（如本例中的exit命令），也会分配伪终端。这在某些情况下很有用，例如确保远程命令的执行环境与交互式登录相似；</p><p><a href="mailto:&#x75;&#x73;&#x65;&#114;&#x40;&#101;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;">&#x75;&#x73;&#x65;&#114;&#x40;&#101;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;</a>：这是你想要连接的远程主机的用户名和地址；</p><p>“exit”：这是在远程主机上执行的命令。在这个例子中，命令是exit，它将立即结束会话；</p><p>&amp;：这个符号将SSH命令放入后台执行。这意味着你可以在本地机器上继续工作，而不必等待SSH会话结束</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenStack一键脚本安装（RDO）</title>
    <link href="/2024/10/31/OpenStack%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%EF%BC%88RDO%EF%BC%89/"/>
    <url>/2024/10/31/OpenStack%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%EF%BC%88RDO%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="OpenStack安装部署"><a href="#OpenStack安装部署" class="headerlink" title="OpenStack安装部署"></a>OpenStack安装部署</h3><h4 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">centos7.9 镜像获取地址：<br>http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso<br><br>准备资料：<br>OpenStack 官方文档：https://docs.openstack.org/install-guide/<br><br>阿里云 yum 源设置官方文档：<br>https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.3e221b11Jpkdzb<br><br>注意：**** 内存要设置8G以上<br></code></pre></td></tr></table></figure><h5 id="1-修改系统的主机名"><a href="#1-修改系统的主机名" class="headerlink" title="1.修改系统的主机名"></a>1.修改系统的主机名</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hostnamectl set-hostname openstack<br></code></pre></td></tr></table></figure><h5 id="2-配置静态Ip地址"><a href="#2-配置静态Ip地址" class="headerlink" title="2.配置静态Ip地址"></a>2.配置静态Ip地址</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">注意修改自己的网卡配置文件</span><br>[root@openstack ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33<br>TYPE=&quot;Ethernet&quot;<br>PROXY_METHOD=&quot;none&quot;<br>BROWSER_ONLY=&quot;no&quot;<br>BOOTPROTO=static<br>DEFROUTE=&quot;yes&quot;<br>IPV4_FAILURE_FATAL=&quot;no&quot;<br>IPV6INIT=&quot;yes&quot;<br>IPV6_AUTOCONF=&quot;yes&quot;<br>IPV6_DEFROUTE=&quot;yes&quot;<br>IPV6_FAILURE_FATAL=&quot;no&quot;<br>IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;<br>NAME=&quot;ens33&quot;<br>UUID=&quot;22fb56ca-82ea-44f2-85be-6aacdb28eae0&quot;<br>DEVICE=&quot;ens33&quot;<br>ONBOOT=yes<br><span class="hljs-meta prompt_">#</span><span class="language-bash">NM_CONTROLLED=no</span><br>IPADDR=&#123;your IP&#125;<br>GATEWAY=&#123;你的网关&#125;<br>NETMASK=255.255.255.0<br>DNS1=223.5.5.5<br><br><br>[root@openstack ~]# echo &quot;nameserver 223.5.5.5&quot; &gt;&gt; /etc/resolve<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启网络服务</span><br>[root@openstack ~]# systemctl restart network  或 service network restart<br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证IP地址</span><br>[root@openstack ~]# ip addr show<br></code></pre></td></tr></table></figure><h5 id="3-添加主机hosts记录"><a href="#3-添加主机hosts记录" class="headerlink" title="3.添加主机hosts记录"></a>3.添加主机hosts记录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openstack ~]# echo &quot;&#123;your IP&#125; openstack&quot; &gt;&gt; /etc/hosts<br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证修改结果</span><br>[root@openstack ~]# more /etc/hosts<br></code></pre></td></tr></table></figure><h5 id="4-设置本机SSH免密登录"><a href="#4-设置本机SSH免密登录" class="headerlink" title="4.设置本机SSH免密登录"></a>4.设置本机SSH免密登录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">生成ssh密钥</span><br>[root@openstack ~]# ssh-keygen<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加密钥信息到~./ssh/know_hosts文件</span><br>[root@openstack ~]# ssh-copy-id root@&#123;your IP&#125;<br></code></pre></td></tr></table></figure><h5 id="5-关闭服务"><a href="#5-关闭服务" class="headerlink" title="5.关闭服务"></a>5.关闭服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">a.关闭防火墙：<br>[root@openstack ~]# systemctl stop firewalld<br>[root@openstack ~]# systemctl disable firewalld<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看防火墙状态</span><br>[root@openstack ~]# systemctl status firewalld<br><br>b.关闭SeLinux<br>[root@openstack ~]# setenforce 0<br>[root@openstack ~]# sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27; /etc/selinux/config<br><br>c.关闭NetworkManager服务<br>[root@openstack ~]# systemctl stop NetworkManager<br>[root@openstack ~]# systemctl disable NetworkManager<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看NetworkManager状态</span><br>[root@openstack ~]# systemctl status NetworkManager<br></code></pre></td></tr></table></figure><h5 id="6-安装常用软件"><a href="#6-安装常用软件" class="headerlink" title="6.安装常用软件"></a>6.安装常用软件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openstack ~]# yum -y install vim bash-completion yum-utils<br></code></pre></td></tr></table></figure><h5 id="7-安装openstack-Stein-的yum库"><a href="#7-安装openstack-Stein-的yum库" class="headerlink" title="7.安装openstack Stein 的yum库"></a>7.安装openstack Stein 的yum库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@openstack ~]# yum -y install centos-release-openstack-stein<br><br>安装后一定要修改为阿里云的库：<br>依次修改配置<br> <span class="hljs-built_in">cd</span> /etc/yum.repos.d/<br>-----原版------<br><span class="hljs-comment">#备份</span><br><span class="hljs-comment"># cp -a CentOS-OpenStack-stein.repo CentOS-OpenStack-stein.repo.bak</span><br><br><span class="hljs-comment">#修改配置文件</span><br><span class="hljs-comment">#[root@openstack ~]# vim CentOS-OpenStack-stein.repo</span><br>[centos-openstack-stein]<br>baseurl=http://mirrors.aliyun.com/<span class="hljs-variable">$contentdir</span>/<span class="hljs-variable">$releasever</span>/cloud/<span class="hljs-variable">$basearch</span>/openstack-stein/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=cloud-openstack-stein</span><br>...<br><br>-----原版---------<br>-----修改版--------<br><span class="hljs-comment"># 备份</span><br><span class="hljs-built_in">cd</span> /etc/yum.repos.d/ &amp;&amp; <span class="hljs-built_in">mkdir</span> bak &amp;&amp; <span class="hljs-built_in">mv</span> * bak<br><span class="hljs-comment"># 添加阿里云的源</span><br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<br><span class="hljs-comment"># 要是上面的wget命令不能使用，则使用下面这一条</span><br>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<br><br><span class="hljs-comment">#修改配置文件</span><br>vim CentOS-OpenStack-stein.repo<br><br>[centos-openstack-stein]<br>baseurl=http://mirrors.aliyun.com/<span class="hljs-variable">$contentdir</span>/<span class="hljs-variable">$releasever</span>/cloud/<span class="hljs-variable">$basearch</span>/openstack-stein/<br><span class="hljs-comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=cloud-openstack-stein</span><br><br>----修改版---------<br><span class="hljs-comment">#清除本地yum索引缓存，然后再重建索引缓存</span><br>[root@openstack ~]# yum clean all &amp;&amp; yum makecache<br></code></pre></td></tr></table></figure><h5 id="8-安装pakcstack工具"><a href="#8-安装pakcstack工具" class="headerlink" title="8. 安装pakcstack工具"></a>8. 安装pakcstack工具</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openstack ~]# yum -y install openstack-packstack<br></code></pre></td></tr></table></figure><h5 id="9-安装openStack-allinone"><a href="#9-安装openStack-allinone" class="headerlink" title="9.安装openStack allinone"></a>9.安装openStack allinone</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openstack ~]# packstack --allinone<br>Welcome to the Packstack setup utility<br><br>The installation log file is available at: /var/tmp/packstack/20230727-071818-k1kmMw/openstack-setup.log<br><br>Installing:<br>Clean Up                                             [ DONE ]<br>Discovering ip protocol version                      [ DONE ]<br>Setting up ssh keys                                  [ DONE ]<br>Preparing servers                                    [ DONE ]<br>Pre installing Puppet and discovering hosts&#x27; details [ DONE ]<br>Preparing pre-install entries                        [ DONE ]<br>Setting up CACERT                                    [ DONE ]<br>Preparing AMQP entries                               [ DONE ]<br>Preparing MariaDB entries                            [ DONE ]<br>Fixing Keystone LDAP config parameters to be undef if empty[ DONE ]<br>Preparing Keystone entries                           [ DONE ]<br>Preparing Glance entries                             [ DONE ]<br>Checking if the Cinder server has a cinder-volumes vg[ DONE ]<br>Preparing Cinder entries                             [ DONE ]<br>Preparing Nova API entries                           [ DONE ]<br>Creating ssh keys for Nova migration                 [ DONE ]<br>Gathering ssh host keys for Nova migration           [ DONE ]<br>Preparing Nova Compute entries                       [ DONE ]<br>Preparing Nova Scheduler entries                     [ DONE ]<br>Preparing Nova VNC Proxy entries                     [ DONE ]<br>Preparing OpenStack Network-related Nova entries     [ DONE ]<br>Preparing Nova Common entries                        [ DONE ]<br>Preparing Neutron LBaaS Agent entries                [ DONE ]<br>Preparing Neutron API entries                        [ DONE ]<br>Preparing Neutron L3 entries                         [ DONE ]<br>Preparing Neutron L2 Agent entries                   [ DONE ]<br>Preparing Neutron DHCP Agent entries                 [ DONE ]<br>Preparing Neutron Metering Agent entries             [ DONE ]<br>Checking if NetworkManager is enabled and running    [ DONE ]<br>Preparing OpenStack Client entries                   [ DONE ]<br>Preparing Horizon entries                            [ DONE ]<br>Preparing Swift builder entries                      [ DONE ]<br>Preparing Swift proxy entries                        [ DONE ]<br>Preparing Swift storage entries                      [ DONE ]<br>Preparing Gnocchi entries                            [ DONE ]<br>Preparing Redis entries                              [ DONE ]<br>Preparing Ceilometer entries                         [ DONE ]<br>Preparing Aodh entries                               [ DONE ]<br>Preparing Puppet manifests                           [ DONE ]<br>Copying Puppet modules and manifests                 [ DONE ]<br>Applying 192.168.100.49_controller.pp<br>192.168.100.49_controller.pp:                        [ DONE ]           <br>Applying 192.168.100.49_network.pp<br>192.168.100.49_network.pp:                           [ DONE ]        <br>Applying 192.168.100.49_compute.pp<br>192.168.100.49_compute.pp:                           [ DONE ]        <br>Applying Puppet manifests                            [ DONE ]<br>Finalizing                                           [ DONE ]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">自动化安装时间很长，静静等待(20-30分钟)，直到出现如下信息，表示成功安装。</span><br><br> **** Installation completed successfully ******<br><br>Additional information:<br> * Parameter CONFIG_NEUTRON_L2_AGENT: You have choosen OVN neutron backend. Note that this backend does not support LBaaS, VPNaaS or FWaaS services. Geneve will be used as encapsulation method for tenant networks<br> * A new answerfile was created in: /root/packstack-answers-20230727-071819.txt<br> * Time synchronization installation was skipped. Please note that unsynchronized time on server instances might be problem for some OpenStack components.<br> * File /root/keystonerc_admin has been created on OpenStack client host 192.168.100.49. To use the command line tools you need to source the file.<br> * To access the OpenStack Dashboard browse to http://192.168.100.49/dashboard .<br>Please, find your login credentials stored in the keystonerc_admin in your home directory.<br> * The installation log file is available at: /var/tmp/packstack/20230727-071818-k1kmMw/openstack-setup.log<br> * The generated manifests are available at: /var/tmp/packstack/20230727-071818-k1kmMw/manifests<br></code></pre></td></tr></table></figure><h5 id="10-web登录及密码修改"><a href="#10-web登录及密码修改" class="headerlink" title="10.web登录及密码修改"></a>10.web登录及密码修改</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">Dashboard WEb登录界面：<br>使用：http://&#123;your IP&#125;/dashboard/<br><br>[root@openstack ~]# cat keystonerc_admin <br>unset OS_SERVICE_TOKEN<br>    export OS_USERNAME=admin<br>    export OS_PASSWORD=&#x27;fd8305e89a47450c&#x27;<br>    export OS_REGION_NAME=RegionOne<br>    export OS_AUTH_URL=http://192.168.100.49:5000/v3<br>    export PS1=&#x27;[\u@\h \W(keystone_admin)]\$ &#x27;<br><br>export OS_PROJECT_NAME=admin<br>export OS_USER_DOMAIN_NAME=Default<br>export OS_PROJECT_DOMAIN_NAME=Default<br>export OS_IDENTITY_API_VERSION=3<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://www.bookstack.cn/read/deployopenstackwithpuppet/Introduction-read_guide.md">正确的阅读姿势 - 《深入理解 OpenStack 自动化部署》 - 书栈网 · BookStack</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>OpenStack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统使用代理</title>
    <link href="/2024/10/28/Linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/"/>
    <url>/2024/10/28/Linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux系统使用代理"><a href="#Linux系统使用代理" class="headerlink" title="Linux系统使用代理"></a>Linux系统使用代理</h1><hr><h2 id="全局使用代理"><a href="#全局使用代理" class="headerlink" title="全局使用代理"></a>全局使用代理</h2><h3 id="代理变量的分类"><a href="#代理变量的分类" class="headerlink" title="代理变量的分类"></a>代理变量的分类</h3><table><thead><tr><th>环境变量</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>http_proxy</td><td>为http变量设置代理；默认不填开头以http协议传输</td><td><a href="http://10.0.0.51:8080/">http://10.0.0.51:8080</a>  <a href="http://user:pass@10.0.0.10:8080/">http://user:pass@10.0.0.10:8080</a>    socks4:&#x2F;&#x2F;10.0.0.51:1080  socks5:&#x2F;&#x2F;192.168.1.1:1080</td></tr><tr><td>https_proxy</td><td>为https变量设置代理；</td><td>同上</td></tr><tr><td>ftp_proxy</td><td>为ftp变量设置代理；</td><td>同上</td></tr><tr><td>all_proxy</td><td>全部变量设置代理，设置了这个时候上面的不用设置</td><td>同上</td></tr><tr><td>no_proxy</td><td>无需代理的主机或域名； 可以使用通配符； 多个时使用“,”号分隔；</td><td>.aiezu.com,10…,192.168.., *.local,localhost,127.0.0.1</td></tr></tbody></table><h3 id="代理协议的分类"><a href="#代理协议的分类" class="headerlink" title="代理协议的分类"></a>代理协议的分类</h3><table><thead><tr><th>协议</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>Http代理</td><td>用于网页浏览等HTTP协议的代理服务</td><td>export http_proxy&#x3D;”<a href="http://192.168.1.1:123"；ip地址以及端口根据自己的配置写">http://192.168.1.1:123&quot;；ip地址以及端口根据自己的配置写</a></td></tr><tr><td>Https代理</td><td>类似于HTTP代理，但提供了加密传输，适用于安全的网页浏览</td><td>export https_proxy&#x3D;”<a href="https://192.168.1.1:123"；ip地址以及端口根据自己的配置写">https://192.168.1.1:123&quot;；ip地址以及端口根据自己的配置写</a></td></tr><tr><td>Socket4代理</td><td>是SOCKS5的前身，功能较为有限，不支持UDP和验证</td><td>export http_proxy&#x3D;”socks5:&#x2F;&#x2F;192.168.1.1:123”&#x2F;export https_proxy&#x3D;”socks5:&#x2F;&#x2F;192.168.1.1:123”；ip以及端口根据自己的代理配置</td></tr><tr><td>Socket5代理</td><td>SOCKS代理可以支持多种协议，包括TCP和UDP，并且可以代理任何类型的流量，是常用版本，支持验证，并且可以代理基于UDP的流量</td><td>export http_proxy&#x3D;”socks5:&#x2F;&#x2F;192.168.1.1:123”&#x2F;export https_proxy&#x3D;”socks5:&#x2F;&#x2F;192.168.1.1:123”；ip以及端口根据自己的代理配置</td></tr><tr><td>Ftp代理</td><td>专用于文件传输的代理服务</td><td>export ftp_proxy&#x3D;”<a href="http://192.168.1.1:123"；ip地址以及端口根据自己的配置写">http://192.168.1.1:123&quot;；ip地址以及端口根据自己的配置写</a></td></tr><tr><td>Shadowsocks代理</td><td>是一个加密的代理协议，常用于绕过网络审查</td><td>这个协议通常使用Socket5协议的端口进行数据通信，故，配置通Socket5</td></tr></tbody></table><h3 id="设置方式"><a href="#设置方式" class="headerlink" title="设置方式"></a>设置方式</h3><h4 id="1-临时生效（仅在当前shell下生效）"><a href="#1-临时生效（仅在当前shell下生效）" class="headerlink" title="1. 临时生效（仅在当前shell下生效）"></a>1. 临时生效（仅在当前shell下生效）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">export proxy=&quot;http://192.168.5.14:8118&quot;<br>export http_proxy=$proxy<br>export https_proxy=$proxy<br>export ftp_proxy=$proxy<br>export no_proxy=&quot;localhost, 127.0.0.1, ::1&quot;<br></code></pre></td></tr></table></figure><h4 id="2-永久生效"><a href="#2-永久生效" class="headerlink" title="2. 永久生效"></a>2. 永久生效</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">针对上面变量的设置方法</span><br>1、在/etc/profile<br>2、在~/.bashrc<br>3、在~/.zshrc<br>4、在~/.profile<br>4、在以上四类文件的其中一类的内容最后面添加临时生效的那些参数；如果配置了“all_proxy”参数，<br>那么其余参数就不需要了<br>5、写入完成后使用以下命令，使环境变量生效<br>source ~/.bashrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">例如</span><br>sudo tee /etc/profile.d/custom_proxy.sh &lt;&lt;&#x27;END&#x27;<br>export proxy=&quot;http://192.168.1.1:8080&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> proxy=<span class="hljs-string">&quot;socks5://192.168.1.1:1080&quot;</span></span><br>export http_proxy=$proxy<br>export https_proxy=$proxy<br>export ftp_proxy=$proxy<br>export no_proxy=&quot;localhost, 127.0.0.1, ::1&quot;<br>END<br></code></pre></td></tr></table></figure><h3 id="取消设置环境变量"><a href="#取消设置环境变量" class="headerlink" title="取消设置环境变量"></a>取消设置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">unset http_proxy<br>unset https_proxy<br>unset ftp_proxy<br>unset no_proxy<br></code></pre></td></tr></table></figure><hr><h2 id="Apt使用代理"><a href="#Apt使用代理" class="headerlink" title="Apt使用代理"></a>Apt使用代理</h2><h3 id="设置方式-1"><a href="#设置方式-1" class="headerlink" title="设置方式"></a>设置方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 创建并编辑apt代理文件，文件名随便写，但是必须是“.conf”结尾</span><br>sudo vi /etc/apt/apt.conf.d/proxy.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 往文件里写入以下内容，ip地址以及端口号根据自己的配置进行更换</span><br>Acquire::http::Proxy &quot;http://192.168.56.102:3128/&quot;; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">这一条是配置apt使用http协议时使用代理</span><br>Acquire::https::Proxy &quot;http://192.168.56.102:3128/&quot;; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">这一条是配置apt使用https协议时使用代理</span><br>Acquire::ftp::Proxy &quot;ftp://192.168.56.102:3128/&quot;; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">这一条是配置apt使用ftp协议时使用代理</span><br></code></pre></td></tr></table></figure><h4 id="如果代理有账号和密码"><a href="#如果代理有账号和密码" class="headerlink" title="如果代理有账号和密码"></a>如果代理有账号和密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">同样，代理的ip地址、端口号、账号、密码信息根据自己的配置进行更换</span><br>Acquire::http::Proxy &quot;http://init@PassW0rd321#@192.168.56.102:3128/&quot;;<br>Acquire::https::Proxy &quot;http://init@PassW0rd321#@192.168.56.102:3128/&quot;;<br></code></pre></td></tr></table></figure><hr><h2 id="Yum使用代理"><a href="#Yum使用代理" class="headerlink" title="Yum使用代理"></a>Yum使用代理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">单独设置yum代理访问，如下文件的变量，ip地址以及端口根据自己配置进行更改</span><br>echo &quot;proxy=http://127.0.0.1:8080/&quot; &gt;&gt; /etc/yum.conf<br></code></pre></td></tr></table></figure><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li><p><a href="https://cloud.tencent.com/developer/article/2129796">Linux操作系统下的全局代理配置与实践-腾讯云开发者社区-腾讯云</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/629584549">如何为 APT 命令设置代理 | Linux 中国</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PVE优化</title>
    <link href="/2024/10/27/PVE%E4%BC%98%E5%8C%96/"/>
    <url>/2024/10/27/PVE%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="PVE优化"><a href="#PVE优化" class="headerlink" title="PVE优化"></a>PVE优化</h1><h2 id="1-修改时区"><a href="#1-修改时区" class="headerlink" title="1. 修改时区"></a>1. 修改时区</h2><h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">修改时区</span><br>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br></code></pre></td></tr></table></figure><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">修改时区</span><br>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br></code></pre></td></tr></table></figure><h2 id="2-命令行管理虚拟机"><a href="#2-命令行管理虚拟机" class="headerlink" title="2. 命令行管理虚拟机"></a>2. 命令行管理虚拟机</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看集群资源状况</span><br><br>pvesh get /cluster/resources<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">取得虚拟机当前状态</span><br><br>pvesh get /nodes/&lt;节点id&gt;/qemu/&lt;虚拟机id&gt;/status/current<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭虚拟机</span><br><br>pvesh create /nodes/&lt;节点id&gt;/qemu/&lt;虚拟机id&gt;/status/stop<br></code></pre></td></tr></table></figure><h2 id="3-Iptables端口转发"><a href="#3-Iptables端口转发" class="headerlink" title="3. Iptables端口转发"></a>3. Iptables端口转发</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将本机的 7777 端口转发到 6666 端口。</span><br><br>iptables -t nat -A PREROUTING -p tcp --dport 7777 -j REDIRECT --to-port 6666<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过192.168.1.168 的 6666 端口访问192.168.1.8 的 7777 端口，在192.168.1.168 上设置：</span><br>sysctl -w net.ipv4.ip_forward=1<br>iptables -t nat -A PREROUTING -p tcp --dport 6666 -j DNAT --to-destination 192.168.1.8:7777<br>iptables -t nat -A POSTROUTING -p tcp -d 192.168.1.8 --dport 7777 -j SNAT --to-source 192.168.1.168<br></code></pre></td></tr></table></figure><h2 id="4-PVE界面概要监控1970"><a href="#4-PVE界面概要监控1970" class="headerlink" title="4. PVE界面概要监控1970"></a>4. PVE界面概要监控1970</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm /var/lib/rrdcached/db/* -rf<br></code></pre></td></tr></table></figure><h2 id="5-Debian网络默认配置"><a href="#5-Debian网络默认配置" class="headerlink" title="5. Debian网络默认配置"></a>5. Debian网络默认配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">auto lo  # 配置网卡开机自启动<br>iface lo inet loopback # 配置网卡的类型是回环口<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">The primary network interface</span> <br><br>auto eth0 <br>iface eth0 inet static # 配置该网卡为静态获取IP<br>address 192.168.0.42 <br>network 192.168.0.0 <br>netmask 255.255.255.0 <br>broadcast 192.168.0.255 <br>gateway 192.168.0.1<br></code></pre></td></tr></table></figure><h2 id="6-使用vi时方向键变字母和退格键的解决方案"><a href="#6-使用vi时方向键变字母和退格键的解决方案" class="headerlink" title="6. 使用vi时方向键变字母和退格键的解决方案"></a>6. 使用vi时方向键变字母和退格键的解决方案</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/vim/vimrc.tiny<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">找到<span class="hljs-built_in">set</span> compatible这一行，然后改成以下的，保存退出即可</span><br>set nocompatible<br>set backspace=2<br></code></pre></td></tr></table></figure><h2 id="7-替换pve的ssl自签证书"><a href="#7-替换pve的ssl自签证书" class="headerlink" title="7. 替换pve的ssl自签证书"></a>7. 替换pve的ssl自签证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/pve/nodes/&#123;主机名&#125;/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">pve-ssl.key和 pve-ssl.pem即是需要替换的文件</span><br></code></pre></td></tr></table></figure><h2 id="8-转发pve的默认管理8006端口"><a href="#8-转发pve的默认管理8006端口" class="headerlink" title="8. 转发pve的默认管理8006端口"></a>8. 转发pve的默认管理8006端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -t nat -I PREROUTING -d &lt;IP&gt; -p tcp --dport 443 -j DNAT --to-destination &lt;IP&gt;:8006<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8006<br></code></pre></td></tr></table></figure><h2 id="9-pve完全彻底离开集群"><a href="#9-pve完全彻底离开集群" class="headerlink" title="9. pve完全彻底离开集群"></a>9. pve完全彻底离开集群</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.在web管理页面将节点退出集群</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当需要将故障（离线）节点退出集群，需要做以下的事</span><br><br>pvecm delnode &#123;节点名&#125; # 执行删除节点<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 进入目录“/etc/pve/priv”</span><br>cd /etc/pve/priv<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑“authorized_keys”与“known_host”文件，删除故障节点的信息</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 进入目录“/etc/pve/nodes”</span><br>cd /etc/pve/nodes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除故障节点的目录</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4. 删除故障节点挂载的硬盘或者存储</span><br></code></pre></td></tr></table></figure><h2 id="任务错误：激活LV-‘pve-data’失败：当逻辑卷pve-data-tdata处于活动状态时，禁止激活逻辑卷pve-data"><a href="#任务错误：激活LV-‘pve-data’失败：当逻辑卷pve-data-tdata处于活动状态时，禁止激活逻辑卷pve-data" class="headerlink" title="任务错误：激活LV ‘pve&#x2F;data’失败：当逻辑卷pve&#x2F;data_tdata处于活动状态时，禁止激活逻辑卷pve&#x2F;data"></a>任务错误：激活LV ‘pve&#x2F;data’失败：当逻辑卷pve&#x2F;data_tdata处于活动状态时，禁止激活逻辑卷pve&#x2F;data</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">lvhange -an pve/data<br>lvconvert --repair pve/data<br>lvchange -ay pve/data<br>qm unlock 100<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="https://dongrenwen.github.io/2020/03/16/lxc-install-ntp/">https://dongrenwen.github.io/2020/03/16/lxc-install-ntp/</a></p></li><li><p><a href="https://www.wjxy.net.cn/?p=547">在PVE命令行下管理虚拟机的启动和停止 &#8211; 苏州凡卓文化科技有限公司</a></p></li><li><p><a href="https://blog.csdn.net/zhouguoqionghai/article/details/81947603">iptables 端口转发_iptable添加7777端口-CSDN博客</a></p></li><li><p><a href="https://www.jianshu.com/p/1cde7f677484">PVE的web界面概要监控1970-01-01的解决办法 - 简书</a></p></li><li><p><a href="https://www.npbeta.com/2021/06/iptables_pve_nat/">https://www.npbeta.com/2021/06/iptables_pve_nat/</a></p></li><li><p><a href="https://www.cnblogs.com/zhouhbing/p/4300733.html">Debian系网络配置 &#x2F;etc&#x2F;network&#x2F;interfaces - 周人假的 - 博客园</a></p></li><li><p><a href="https://blog.csdn.net/SunJavaApplet/article/details/97040634">ProxmoxVE下使用Vi方向键变字母和退格键的解决办法_promox vi-CSDN博客</a></p></li><li><p><a href="https://blog.gavinzh.com/2020/04/19/precautions-after-installing-proxmox/">安装proxmox后注意事项 - 张恒的网络日志</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/508160432">https://zhuanlan.zhihu.com/p/508160432</a></p></li><li><p><a href="https://forum.proxmox.com/threads/task-error-activating-lv-pve-data-failed-activation-of-logical-volume-pve-data-is-prohibited-while-logical-volume-pve-data_tdata-is-active.106225/">TASK ERROR: activating LV &#039;pve&#x2F;data&#039; failed: Activation of logical volume pve&#x2F;data is prohibited while logical volume pve&#x2F;data_tdata is active. | Proxmox Support Forum</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Proxmox VE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站使用的是HSTS的解决方法</title>
    <link href="/2024/10/26/%E7%BD%91%E7%AB%99%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AFHSTS%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2024/10/26/%E7%BD%91%E7%AB%99%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AFHSTS%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="问题：《现在无法访问-XXX-com，因为网站使用的是-HSTS。网络错误和攻击通常是暂时的，因此该页面以后可能会恢复正常》"><a href="#问题：《现在无法访问-XXX-com，因为网站使用的是-HSTS。网络错误和攻击通常是暂时的，因此该页面以后可能会恢复正常》" class="headerlink" title="问题：《现在无法访问 XXX.com，因为网站使用的是 HSTS。网络错误和攻击通常是暂时的，因此该页面以后可能会恢复正常》"></a>问题：《现在无法访问 XXX.com，因为网站使用的是 HSTS。网络错误和攻击通常是暂时的，因此该页面以后可能会恢复正常》</h3><ul><li><p>解决：</p><p>在当前页面直接输入thisisunsafe(不是地址栏，真的是鼠标往那里一甩，直接就打字)，甚至回车都不用，就直接进去了。至于原因。不知道真不真：其实就是一个Chromium内置的后门（ edge 也是基于chorme），特地写成 thisis unsafe 就是让使用者不要滥用这个功能（之前叫 badidea ），输入之后 访问https网站显示“你的连接不是专用连接 ” 解决方法。</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://blog.csdn.net/ted_guangda/article/details/129010030">https://blog.csdn.net/ted_guangda/article/details/129010030</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机速成课笔记</title>
    <link href="/2024/10/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9F%E6%88%90%E8%AF%BE(%E5%B7%B2%E5%AE%8C%E6%88%90)/"/>
    <url>/2024/10/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9F%E6%88%90%E8%AF%BE(%E5%B7%B2%E5%AE%8C%E6%88%90)/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机速成课"><a href="#计算机速成课" class="headerlink" title="计算机速成课"></a>计算机速成课</h1><hr><h2 id="计算机发展史"><a href="#计算机发展史" class="headerlink" title="计算机发展史"></a>计算机发展史</h2><blockquote><p>计算机的出现是加强了人类处理信息的能力</p></blockquote><ol><li><p>算盘（公元前2500年-美索不达米亚）【本质是手动操作机计算器】</p></li><li><p>星盘【可以让船只在海上计算经纬度】</p></li><li><p>计算尺【用来帮助做乘法和处罚】</p></li><li><p>时钟【用来计算时间】</p></li><li><p>德国博物学家莱布尼茨乘法器【1694年建造】</p></li><li><p>射程表【环境和炮膛角度对应炮弹飞过的距离】</p></li><li><p>差分机（Charles Babbage设计）【用于计算近似多项式】</p></li><li><p>分析机【一台“通用计算机”】</p></li><li><p>打孔卡片制表机 （Herman Hollerith建造）【用于美国的人口普查】</p></li><li><p>哈佛马克1号（1944年IBM为同盟国建造）【给曼哈顿计划运行计算机模拟，科学研究，教学，弹道计算，飞机飞行性能分析】{主要组件：机械继电器}</p></li><li><p>Colossus Mk 1（1943年12月完工）【用于帮助解密纳粹通信】{主要组件：二极管&#x2F;三极管}</p></li><li><p>ENIAC（1946年宾夕法尼亚大学建造）【电子数值积分计算机，世界上第一台真正的“通用目的”，”可编程“的”电子“计算机】{主要组件：二极管&#x2F;三极管&#x2F;真空管}</p></li><li><p>IBM 608（1957年IBM发行）【通用计算机】{主要组件：晶体管}</p></li></ol><p><mark>  计算机组件变化——&gt;继电器——&gt;真空管——&gt;晶体管——&gt;集成电路——&gt;大规模集成电路</mark></p><hr><h2 id="Boolean-logic-布尔逻辑（逻辑门）"><a href="#Boolean-logic-布尔逻辑（逻辑门）" class="headerlink" title="Boolean logic 布尔逻辑（逻辑门）"></a>Boolean logic 布尔逻辑（逻辑门）</h2><h3 id="“与”"><a href="#“与”" class="headerlink" title="“与”"></a>“与”</h3><p><img src="/img/assets/2024-03-04-21-51-57-image.png"><br><img src="/img/assets/2024-03-09-23-57-21-image.png"></p><h3 id="“或”"><a href="#“或”" class="headerlink" title="“或”"></a>“或”</h3><p><img src="/img/assets/2024-03-04-21-52-18-image.png"><br><img src="/img/assets/2024-03-09-23-58-22-image.png"></p><h3 id="“非”"><a href="#“非”" class="headerlink" title="“非”"></a>“非”</h3><p><img src="/img/assets/2024-03-04-21-51-20-image.png"><br><img src="/img/assets/2024-03-10-00-00-36-image.png"></p><h3 id="“异或”"><a href="#“异或”" class="headerlink" title="“异或”"></a>“异或”</h3><p><img src="/img/assets/2024-03-04-21-55-22-image.png"><br><img src="/img/assets/2024-03-09-23-58-53-image.png"></p><hr><h2 id="进制-编码"><a href="#进制-编码" class="headerlink" title="进制&amp;&amp;编码"></a>进制&amp;&amp;编码</h2><h3 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h3><blockquote><p>范围：(0-9)</p></blockquote><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><blockquote><p>范围：(0-1)</p></blockquote><h3 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h3><blockquote><p>范围：(0-7)</p></blockquote><h3 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h3><blockquote><p>范围：(0-9,A-F{10-15})</p></blockquote><h3 id="计算机进制位"><a href="#计算机进制位" class="headerlink" title="计算机进制位"></a>计算机进制位</h3><ol><li><p>   位(bit)    范围：0-255【b】</p></li><li><p>字节 (byte)  【B】</p></li><li><p>   千字节(kilobytes)【KB】</p></li><li><p>兆(或者说百万)字节(megabytes)【MB】</p></li><li><p>千兆字节(gigabytes)【GB】</p></li></ol><h4 id="进制换算"><a href="#进制换算" class="headerlink" title="进制换算"></a>进制换算</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs textile">1 byte = 8 bit<br><br>1 KB = 1024 bytes = 2^10 bytes<br><br>1 MB = 1024 KB    = 2^10 KB<br><br>1 GB = 1024 MB    = 2^10 MB<br><br>1 TB = 1024 GB    = 2^10 TB<br><br>1 EB = 1024 TB    = 2^10 EB<br></code></pre></td></tr></table></figure><h5 id="计算机系统位数"><a href="#计算机系统位数" class="headerlink" title="计算机系统位数"></a>计算机系统位数</h5><ul><li>32位(bits)计算机</li></ul><blockquote><p>最多能识别总共4GB内存</p></blockquote><blockquote><p>第一位表示正负，0表示正，1表示负，剩下31位用来表示数字</p></blockquote><ul><li>64位(bits)计算机</li></ul><blockquote><p>最多能识别总共16EB的内存</p></blockquote><blockquote><p>第一位表示正负，0表示正，1表示负，剩下63位用来表示数字</p></blockquote><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><h4 id="32位浮点数"><a href="#32位浮点数" class="headerlink" title="32位浮点数"></a>32位浮点数</h4><blockquote><p>第一位表示数字正负，0表示正，1表示负，接下来8位存指数，剩下23位存有效位数</p></blockquote><blockquote><p>例：0.6259*10^(3)     0.6259表示有效位数，3是指数</p></blockquote><h3 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h3><blockquote><p>美国信息交换标准代码，总共7位，共128个值</p><p><a href="https://www.asciim.cn/">ASCII码表详情</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs textile"># 常用的ASCII码，例<br><br>a —— 97<br><br>A —— 65<br></code></pre></td></tr></table></figure><h4 id="1-拓展ASCII码"><a href="#1-拓展ASCII码" class="headerlink" title="1. 拓展ASCII码"></a>1. 拓展ASCII码</h4><ul><li>总共8位，共255个值</li></ul><h4 id="2-Unicode"><a href="#2-Unicode" class="headerlink" title="2. Unicode"></a>2. Unicode</h4><ul><li><p>设计于1992年，是一个统一的编码方案，为了解决不同国家字符标准的问题</p></li><li><p>总共17位，每个组65535个值，总共有17个组</p></li></ul><hr><h2 id="算术逻辑单元-ALU"><a href="#算术逻辑单元-ALU" class="headerlink" title="算术逻辑单元(ALU)"></a>算术逻辑单元(ALU)</h2><p><strong>现代计算机的基石</strong></p><p>1970年发布的intel 74181是第一个封装在单个芯片内的完整ALU</p><h3 id="算术单元"><a href="#算术单元" class="headerlink" title="算术单元"></a>算术单元</h3><blockquote><p>负责计算机里所有的数字操作(即给数值)</p></blockquote><h4 id="全加器"><a href="#全加器" class="headerlink" title="全加器"></a>全加器</h4><ul><li>带有进位输入</li></ul><blockquote><p>一位全加器可以处理三个输入，分别是两个要相加的位（A和B）以及一个来自低位的进位（Ci-1）。它的输出包括本位的和（Si）和一个向高位的进位（Ci）</p></blockquote><h4 id="半加器"><a href="#半加器" class="headerlink" title="半加器"></a>半加器</h4><ul><li>不带进位输入</li></ul><blockquote><p>用于执行两个单比特二进制数的加法运算。它的输出结果包括一个求和（sum）和一个进位（carry）。在多比特数的计算中，进位将作为下一相邻比特的加法运算的一部分。单个半加器的计算结果是进位和求和的总和</p></blockquote><h4 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h4><blockquote><p>数字过大超过可以计算的结果</p></blockquote><h3 id="逻辑单元"><a href="#逻辑单元" class="headerlink" title="逻辑单元"></a>逻辑单元</h3><blockquote><p>负责计算机里逻辑运算（“与”“或”“非”“异或”）</p></blockquote><hr><h2 id="寄存器-内存"><a href="#寄存器-内存" class="headerlink" title="寄存器&amp;内存"></a>寄存器&amp;内存</h2><h3 id="1-随机存取存储器-RAM"><a href="#1-随机存取存储器-RAM" class="headerlink" title="1. 随机存取存储器 RAM"></a>1. 随机存取存储器 RAM</h3><blockquote><p>只有通电情况下才能存储东西，断电东西丢失 </p></blockquote><h3 id="2-持久存储"><a href="#2-持久存储" class="headerlink" title="2. 持久存储"></a>2. 持久存储</h3><blockquote><p>电源关闭时数据不会丢失</p></blockquote><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><ul><li>拥有一条数据输入控制线，一条允许写入控制线以及一条数据输出控制线的简单逻辑电路称作锁存器 <em>(简单理解—-十字路口)</em></li></ul><blockquote><p>多个锁存器组合形成寄存器[SRAM{静态随机存取存储器}]。这个寄存器能存一个数字，这个数字有多少位，称为“位宽”</p></blockquote><h3 id="矩阵-简单理解——十字路口"><a href="#矩阵-简单理解——十字路口" class="headerlink" title="矩阵(简单理解——十字路口)"></a>矩阵(简单理解——十字路口)</h3><blockquote><p>目的：为了组合更多的锁存器，组成寄存器</p></blockquote><h3 id="多路复用器"><a href="#多路复用器" class="headerlink" title="多路复用器"></a>多路复用器</h3><hr><h2 id="CPU微体系架构"><a href="#CPU微体系架构" class="headerlink" title="CPU微体系架构"></a>CPU微体系架构</h2><h4 id="一、寄存器"><a href="#一、寄存器" class="headerlink" title="一、寄存器"></a>一、寄存器</h4><blockquote><p>用来临时存数据和操作数据 </p></blockquote><h4 id="二、指令表"><a href="#二、指令表" class="headerlink" title="二、指令表"></a>二、指令表</h4><ol><li><p>指令</p></li><li><p>描述</p></li><li><p>4位操作码</p></li><li><p>地址或寄存器</p></li></ol><h4 id="三、指令地址寄存器"><a href="#三、指令地址寄存器" class="headerlink" title="三、指令地址寄存器"></a>三、指令地址寄存器</h4><blockquote><p>追踪程勋运行到哪里（存当前指令的内存地址）</p></blockquote><h4 id="四、指令寄存器"><a href="#四、指令寄存器" class="headerlink" title="四、指令寄存器"></a>四、指令寄存器</h4><blockquote><p>存储运行的程序</p></blockquote><h2 id="CPU运行程序的流程"><a href="#CPU运行程序的流程" class="headerlink" title="CPU运行程序的流程"></a>CPU运行程序的流程</h2><ol><li><p><mark>取指令阶段(fetch phase)</mark>[将“指令地址寄存器”连到RAM， 获取到当前“指令地址寄存器”的地址<sup>1</sup>，随后将地址<sup>1</sup>输入到RAM中，并在RAM中找到当前地址<sup>1</sup>所对应的指令代码且将其复制到指令寄存器中]</p><p><strong>注意！！！RAM中有两个部分，1. 地址(Address)，2. 数据(DATA)。而DATA中又分为两个部分；2.1 指令 2.2 RAM数据中的地址</strong></p></li><li><p><mark>解码阶段(Decode phase)</mark>[先通过指令表中匹配是哪条指令，随后通过“控制单元”检查指令的操作码是否正确{通过一个简单的逻辑电路实现}]</p></li><li><p><mark>执行阶段(execute phase)</mark>[用前面“检查识别指令是否正确”的电路打开指令所对应的控制线，并把RAM中的地址 <sup>2.2</sup>再次传到RAM中{需要转化成十进制后再传}，传输完成后，找到RAM中的地址<sup>1</sup>对应的DATA后完成]</p></li><li><p><mark>关闭指令</mark></p></li></ol><p><mark>以上“取指令——&gt;解码——&gt;执行”的速度叫时钟速度，单位赫兹(Hz)[1Hz代表1秒1个周期]</mark></p><h2 id="指令长度"><a href="#指令长度" class="headerlink" title="指令长度"></a>指令长度</h2><blockquote><p>用更多位来代表指令</p></blockquote><h2 id="可变指令长度"><a href="#可变指令长度" class="headerlink" title="可变指令长度"></a>可变指令长度</h2><blockquote><p>通过特定的指令，让指令长度可变</p></blockquote><h3 id="指令集就是上面指令寄存器的合集，由一堆指令构成"><a href="#指令集就是上面指令寄存器的合集，由一堆指令构成" class="headerlink" title="指令集就是上面指令寄存器的合集，由一堆指令构成"></a>指令集就是上面指令寄存器的合集，由一堆指令构成</h3><h2 id="总线-BUS"><a href="#总线-BUS" class="headerlink" title="总线(BUS)"></a>总线(BUS)</h2><blockquote><p>从CPU到各个设备的连接线称为总线</p></blockquote><h3 id="改进CPU"><a href="#改进CPU" class="headerlink" title="改进CPU"></a>改进CPU</h3><blockquote><p>在CPU内部，增加缓存(Cache)，以便减少从设备到CPU之间的延迟</p></blockquote><h3 id="缓存命中"><a href="#缓存命中" class="headerlink" title="缓存命中"></a>缓存命中</h3><blockquote><p>想要的数据在缓存(Cache)中已经存在，可以传给CPU，则称为缓存命中；反之则是缓存不命中</p></blockquote><h3 id="Dirty-BIt"><a href="#Dirty-BIt" class="headerlink" title="Dirty BIt"></a>Dirty BIt</h3><ul><li>为了解决缓存(Cache)和RAM中数据不同步的情况而出现的；</li></ul><blockquote><p>在更新缓存(Cache)之前，先检查Dirty Bit是否是Dirty，如果是，则把缓存(Cache)数据写回到RAM中，然后在把RAM中的新数据写到缓存(Cache)中</p></blockquote><h3 id="指令流水线"><a href="#指令流水线" class="headerlink" title="指令流水线"></a>指令流水线</h3><blockquote><p>将指令按照顺序并行处理</p></blockquote><h2 id="冯诺依曼计算机的标志"><a href="#冯诺依曼计算机的标志" class="headerlink" title="冯诺依曼计算机的标志"></a>冯诺依曼计算机的标志</h2><table><thead><tr><th>1. 一个处理器(有算术逻辑单元)</th><th>2. 数据寄存器</th><th>3. 指令寄存器</th><th>4. 指令地址寄存器</th><th>5. 内存(负责存数据和指令)</th></tr></thead></table><hr><h2 id="编程语言发展史"><a href="#编程语言发展史" class="headerlink" title="编程语言发展史"></a>编程语言发展史</h2><ul><li>大致发展过程</li></ul><table><thead><tr><th align="center">一、“机器语言”或“机器码”</th><th align="center"></th></tr></thead><tbody><tr><td align="center">二、伪代码(将需求的步骤写下来，接下来用机器语言进行执行)</td><td align="center"></td></tr><tr><td align="center">三、将操作码转化成“助记符”，便于理解【即“汇编”】，存储操作码对应的助记符的程序称为汇编器(Assembler)</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">以上的语言，都只能在一种机器上运行，升级或更改机器配置，语言的代码需要重新更改</td></tr><tr><td align="center">四、一种通用编程语言，可以在不同机器上通用；“普通面向商业语言”COBOL[主要是有COBOL编译器]</td><td align="center"></td></tr><tr><td align="center">五、计算机语言大爆发</td><td align="center"></td></tr></tbody></table><ul><li>各个年代的发行的语言</li></ul><table><thead><tr><th>1960年</th><th>1970年</th><th>1980年</th><th>1990年</th><th>2000年</th></tr></thead><tbody><tr><td>- ALGOL<br/>- LISP<br/>- BASIC</td><td>- Pascal<br/>- C<br/>- Smalltak</td><td>- C++  <br/>- Objective-C<br/>- Perl</td><td>- Python<br/>- Ruby<br/>- Java</td><td>- Swift<br/>- C#<br/>- Go</td></tr></tbody></table><hr><h2 id="编程原理-Programming-Basics"><a href="#编程原理-Programming-Basics" class="headerlink" title="编程原理(Programming Basics)"></a>编程原理(Programming Basics)</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>规定句子结构的一系列规则叫语法(Syntax)</p></blockquote><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><blockquote><p>表达你需要的完整思想</p></blockquote><table><thead><tr><th>循环语句</th></tr></thead><tbody><tr><td>if……then语句</td></tr><tr><td>while语句</td></tr><tr><td>for语句</td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>为了减少代码复杂度，将代码打包成“函数”&#x2F;“方法”&#x2F;“子程序”{Functions&#x2F;Methods&#x2F;subroutines}</p></blockquote><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><blockquote><p>预先写好的函数集合称作“库”(Libraries)</p></blockquote><h2 id="算法-Algorithm"><a href="#算法-Algorithm" class="headerlink" title="算法(Algorithm)"></a>算法(Algorithm)</h2><blockquote><p>即：解决问题的具体步骤</p></blockquote><hr><h2 id="数据结构-data-structrue"><a href="#数据结构-data-structrue" class="headerlink" title="数据结构(data structrue)"></a>数据结构(data structrue)</h2><ol><li><p>数组(Array)</p></li><li><p>字符串(String)[即字母，数字，标点符号等等组成的数组]</p></li><li><p>矩阵(Matrix)[即数组的数组；例：一个 3x3 矩阵就是一个长度为3的数组数组里每个元素都是一个长度为3的数组]</p></li><li><p>结构体(Struct)[多个变量打包在一起称为结构体]</p></li></ol><p>        4.1 节点(node)【它存储一个变量、数字、指针等等其他的东西】</p><p>        4.2  指针(pointer)【是一种特殊的变量，它指向一个内存地址】</p><ol start="5"><li><p>链表(linked list)【它能存很多个节点(node)，通过每个节点指向下一个节点实现】{当链表的最后一个指针是0【”null”】时，循环结束；}</p></li><li><p>队列(queue)[先进先出(FIFO){First-IN First-out}]【“入队”(enqueueing)，“出队”(dequeuing)】</p></li><li><p>栈(stack)[后进先出(LIFO){Last-IN First-out}]【“入栈”(push)，“出栈(pop)”】</p></li><li><p>树(tree)[一个节点含有两个指针，这两个指针分别指向节点的头和尾]</p><p>8.1 二叉树(Binary tree)【每个节点最多只有两个子节点】</p></li><li><p>图(Graph)[有多个指针的节点表示，没有根，叶，子节点，父节点这些东西，可以随意指向]</p></li></ol><hr><h2 id="软件工程-Software-Engineering"><a href="#软件工程-Software-Engineering" class="headerlink" title="软件工程(Software Engineering)"></a>软件工程(Software Engineering)</h2><h3 id="对象-Objects"><a href="#对象-Objects" class="headerlink" title="对象(Objects)"></a>对象(Objects)</h3><blockquote><p>把函数打包成层级，把相关代码放在一起打包</p></blockquote><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><blockquote><p>把函数打包成对象的这种思想，称作“面向对象编程”</p></blockquote><h3 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h3><ul><li>beta版</li></ul><blockquote><p>软件接近完成，但不是100%完全测试过，可能会有Bug，发布是为了发现问题</p></blockquote><ul><li>alpha版</li></ul><blockquote><p>一般制作粗糙，错误很多，经常只在公司内部测试</p></blockquote><h3 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h3><blockquote><p>印刷电路板(Print circuit boards)</p></blockquote><h3 id="摩尔定律-一种趋势"><a href="#摩尔定律-一种趋势" class="headerlink" title="摩尔定律(一种趋势)"></a>摩尔定律(一种趋势)</h3><blockquote><p>每两年左右，得益于材料和制造技术的发展，同样大小的空间，能塞进两倍数量的晶体管</p></blockquote><hr><h2 id="操作系统-Operating-system"><a href="#操作系统-Operating-system" class="headerlink" title="操作系统(Operating system)"></a>操作系统(Operating system)</h2><blockquote><p>本质上也是一个程序，但它有操作硬件的特殊权限，可以运行和管理其他程序</p></blockquote><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><blockquote><p>当计算机运行完一个程序，会自动运行下一个程序</p></blockquote><h3 id="设备驱动程序"><a href="#设备驱动程序" class="headerlink" title="设备驱动程序"></a>设备驱动程序</h3><blockquote><p>操作系统提供Api来抽象硬件，称为“设备驱动程序”</p></blockquote><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><blockquote><p>为了隐藏数据在一堆不连续的内存块中的这种复杂性，系统会把内存地址进行“虚拟化”，程序就可以假定内存地址从地址0开始</p></blockquote><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><blockquote><p>程序使用“虚拟内存”时，由“虚拟内存”映射到实际的“物理内存”的过程，称为动态内存分配</p></blockquote><h3 id="内存保护"><a href="#内存保护" class="headerlink" title="内存保护"></a>内存保护</h3><blockquote><p>程序只能更改自己的专属内存，不能更改其他的程序的内存，这样不会影响其他程序</p></blockquote><ul><li>分时操作系统：每个用户只能使用一小部分处理器，内存等等</li></ul><h3 id="新型操作系统"><a href="#新型操作系统" class="headerlink" title="新型操作系统"></a>新型操作系统</h3><ol><li><p>Unix</p><p>系统分成两个部分，</p><p>1.1 操作系统核心：“内核｛kernel｝”内存管理，多任务和输入输出处理</p><p>1.2 一堆有用的工具（不是内核的一部分，｛比如程序和运行库｝）当错误发生，则内核“恐慌（panic）——kernel panic”，这时机器会崩溃 </p></li><li><p>Linux</p></li><li><p>Windows</p></li><li><p>MacOS</p></li><li><p>IOS</p></li><li><p>Android</p></li><li><p>Linux衍生版</p></li></ol><hr><h2 id="内存-memory-存储器-Storage"><a href="#内存-memory-存储器-Storage" class="headerlink" title="内存(memory)&amp;&amp;存储器(Storage)"></a>内存(memory)&amp;&amp;存储器(Storage)</h2><blockquote><p>内存因其断电会丢失数据，故称为“易失性”存储器</p></blockquote><ul><li>特点：速度快</li></ul><p>    </p><blockquote><p>存储器因其断电不会丢失数据，可以持久存储，故称为“非易失性”存储器</p></blockquote><ul><li>特点：速度相对较慢</li></ul><p><img src="/img/assets/2024-03-11-15-41-31-image.png"></p><p>                                                “内存&#x2F;存储器的层次结构”</p><hr><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><blockquote><p>专门负责管理文件</p></blockquote><h2 id="元数据-Meta-data"><a href="#元数据-Meta-data" class="headerlink" title="元数据(Meta data)"></a>元数据(Meta data)</h2><blockquote><p>它存在于文件开头，即在实际数据之前，同时也称“文件头(Header)”</p></blockquote><ul><li>                <strong>以下所有的文件的原始数据皆是二进制数据</strong></li></ul><p>               </p><h3 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h3><blockquote><p>里面只包含文字，解码它的关键是ASCII编码</p></blockquote><h3 id="波形-Wave-文件"><a href="#波形-Wave-文件" class="headerlink" title="波形(Wave)文件"></a>波形(Wave)文件</h3><blockquote><p>同时也称为WAV文件，它存储音频数据，解码它的关键是“数字代表振幅” ；文件头是Wave；</p></blockquote><ul><li>音频数据的数字代表每秒捕获多次的声音幅度，即每次采样声音的振幅可以用一个数字表示，声压越高数字越大，也称“振幅”；“录音”即是对声音进行“采样”[采集声音振幅的样本]</li></ul><h3 id="位图-Bitmap"><a href="#位图-Bitmap" class="headerlink" title="位图(Bitmap)"></a>位图(Bitmap)</h3><blockquote><p>它用于存储图片，文件头是bm；解码它的关键是“数字代表诶个像素的颜色”</p></blockquote><ul><li>它的数据包括图片宽度，图片高度，颜色深度等关键数据；图片宽度和深度均用像素表示；颜色深度由24位构成，这24位分三组，每组8位，分别表示红色，绿色，蓝色的颜色数据，这三原色的不同数值可以组成任意一种颜色。</li></ul><h3 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h3><blockquote><p>存储所有其他文件的名字</p></blockquote><ul><li>格式：“文件名”+“.”+拓展名(即上面的文件头)+文件的元数据(如创建时间，最后修改时间，文件所有者是谁，是否能读&#x2F;写等等)+文件的起始位置和长度</li></ul><h4 id="更新目录文件"><a href="#更新目录文件" class="headerlink" title="更新目录文件"></a>更新目录文件</h4><blockquote><p>类似更新书目的目录，类似索引的东西</p></blockquote><h3 id="平面文件系统"><a href="#平面文件系统" class="headerlink" title="平面文件系统"></a>平面文件系统</h3><blockquote><p>文件都在同一个层次，没有多层包含的关系，即同目录</p></blockquote><h3 id="分层文件系统"><a href="#分层文件系统" class="headerlink" title="分层文件系统"></a>分层文件系统</h3><blockquote><p>目录文件多了额外的元数据，用于确认是文件还是目录，一般位于根目录</p></blockquote><h3 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h3><blockquote><p>文件在删除和移动的过程中，中间空出的数据块，这些不连续的，空白的数据块被称为碎片；</p></blockquote><ul><li>整理碎片即把刚好合适的文件放入这些数据块里面，形成连续的文件，提高读取速度</li></ul><hr><h2 id="压缩-Compression"><a href="#压缩-Compression" class="headerlink" title="压缩(Compression)"></a>压缩(Compression)</h2><h5 id="一、无损压缩-lossless-compression-techniques"><a href="#一、无损压缩-lossless-compression-techniques" class="headerlink" title="一、无损压缩(lossless compression techniques)"></a>一、无损压缩(lossless compression techniques)</h5><ol><li>减少重复信息</li></ol><p>     1.1 游程编码(Run-Length Encoding)【适合经常出现相同值的文件】{原理：增加一个额外的字节，存储重复数据的具体次数，然后删除重复值}</p><ol start="2"><li>生成字典</li></ol><p>        生成一个字典，存储“代码”和“数据”间的对应关系；例子：霍夫曼树(Huffman Tree)</p><p>       2.1 霍夫曼树算法：列出所有块和出现的频率，每轮选两个最低的频率，组成一棵树，最后只生成一棵树；这棵树按照块的出现频率从高到低排列，随后把分支用0和1标注；接着生成字典(把块所在的树的位置用01代码表示，因为块锁在的树的路径是唯一的，故数据也是唯一的；)最后用上面的字典来压缩文件，然后将字典文件存放于压缩后文件的前面</p><h5 id="二、有损压缩-Loosy-Copression-Techniques"><a href="#二、有损压缩-Loosy-Copression-Techniques" class="headerlink" title="二、有损压缩(Loosy Copression Techniques)"></a>二、有损压缩(Loosy Copression Techniques)</h5><blockquote><p>删除一些非必要且无用的数据，以及近似的数据，随后进行压缩</p></blockquote><ul><li>音频有损压缩：用不同精度编码不同的频段，即用不同精度对一段一段音频进行取相似值，随后合成整一段音频</li></ul><hr><h2 id="命令行界面"><a href="#命令行界面" class="headerlink" title="命令行界面"></a>命令行界面</h2><blockquote><p>专业学科“人机交互(Human-computer interaction)”</p></blockquote><h3 id="早期交互界面"><a href="#早期交互界面" class="headerlink" title="早期交互界面"></a>早期交互界面</h3><ol><li><p>齿轮，旋钮，开关等机械结构来进行输入输出        </p></li><li><p>打孔纸卡和磁带，指示灯提供实时反馈</p></li></ol><h4 id="命令行界面-Cmmand-line-interfaces"><a href="#命令行界面-Cmmand-line-interfaces" class="headerlink" title="命令行界面(Cmmand line interfaces)"></a>命令行界面(Cmmand line interfaces)</h4><blockquote><p>输入一个命令到计算机里面，然后计算机会输出回来，用户和计算机来回“对话”</p></blockquote><h4 id="终端-Terminals"><a href="#终端-Terminals" class="headerlink" title="终端(Terminals)"></a>终端(Terminals)</h4><blockquote><p>在原始屏幕输入和输出字，而不是输出其他东西，这些屏幕被称为“虚拟电传打字机”或“玻璃电传打字机”，即“终端”</p></blockquote><hr><h2 id="屏幕和2D图形"><a href="#屏幕和2D图形" class="headerlink" title="屏幕和2D图形"></a>屏幕和2D图形</h2><h5 id="阴极射线管-CRT"><a href="#阴极射线管-CRT" class="headerlink" title="阴极射线管(CRT)"></a>阴极射线管(CRT)</h5><blockquote><p>原理：把电子发射到有磷光体涂层的屏幕上，当电子撞击涂层时，会发光几分之一秒，由于电子是带电粒子，路径可以用磁场控制，屏幕内用板子或者线圈把电子引导到想要的位置</p></blockquote><ul><li>矢量扫描</li></ul><blockquote><p>原理：引导电子束描绘出形状，重点是需要重复描绘形状的速度快</p></blockquote><ul><li>光栅扫描</li></ul><blockquote><p>原理：按照固定路径，一行行来，从上向下，从左到右，不断重复，只在特定的点打开电子束，以此绘制图形</p></blockquote><h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3><blockquote><p>第一代显卡：计算机需要额外的硬件(“字符生成器”)从内存读取字符，然后转换成光栅图形，这样才能显示到屏幕。它内部有一小块只读存储器(ROM)，存储每个字符的图形，叫“点阵图案”</p></blockquote><h3 id="屏幕缓冲器"><a href="#屏幕缓冲器" class="headerlink" title="屏幕缓冲器"></a>屏幕缓冲器</h3><blockquote><p>为了显示，“字符生成器”会访问内存中一块特殊的区域，这块区域专门为图形保留，称作“屏幕缓冲区”；程序想要显示文字时，修改这块区域里的值就行 </p></blockquote><h3 id="帧缓冲区"><a href="#帧缓冲区" class="headerlink" title="帧缓冲区"></a>帧缓冲区</h3><blockquote><p>计算机把像素数据存在内存中的一个特殊区域，早期这些数据在内存(Memory)里，后来存储在高速视频内存(VRAM)【即显存】里 </p></blockquote><hr><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><blockquote><p>解释器是运行时转换成机器码；编译器是提前转换成机器码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机速成课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建ZeroTier的Moon节点</title>
    <link href="/2024/10/20/%E6%90%AD%E5%BB%BAZeroTier%E7%9A%84Moon%E8%8A%82%E7%82%B9/"/>
    <url>/2024/10/20/%E6%90%AD%E5%BB%BAZeroTier%E7%9A%84Moon%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建ZeroTier的Moon节点"><a href="#搭建ZeroTier的Moon节点" class="headerlink" title="搭建ZeroTier的Moon节点"></a>搭建ZeroTier的Moon节点</h1><h2 id="ZeroTier流量分析"><a href="#ZeroTier流量分析" class="headerlink" title="ZeroTier流量分析"></a>ZeroTier流量分析</h2><hr><ul><li><p>公网IP：同时拥有IPV4和IPV6的公网IP，或者仅拥有一方，都可以认为有公网IP；</p></li><li><p><u><em>Moons：由于国内的网络安全策略，导致国内可能没有相应的服务器，这时候就需要自己搭建，以便加快相互通信</em></u></p></li><li><p>动作1：出口网关路由器向中心服务器通告自己的IP地址以及端口信息；为了便于后面两个局域网互相通信；即<u><em>“判断两端局域网是否存在<strong>公网IP</strong>”</em></u></p></li><li><p>动作2：若一方存在<u><em>“公网IP”</em></u>，则ZeroTier帮助两个局域网的设备通过zerotier私有协议，直接建立连接，从而达到P2P直连（就像在同一个内网互相连接一样）；</p></li><li><p>动作3：若两方都不存在<u><em>”公网IP“</em></u>，或一方有<u><em>“公网IPV6”</em></u>一方没有，那么也是认为不存在<u><em>“公网IP”</em></u>的情况；这时候，国外中心服务器（Planet）会通告目前可用的国外&#x2F;国内转发服务器（Moons）【或者理解为备份中心服务器】，两端局域网通过这些（Moons）进行数据通信</p></li></ul><hr><p><img src="/img/assets/2024-10-15-15-58-33-image.png"></p><hr><h2 id="搭建Moon节点准备工作"><a href="#搭建Moon节点准备工作" class="headerlink" title="搭建Moon节点准备工作"></a>搭建Moon节点准备工作</h2><h3 id="1-根据自己的服务器的类型安装对应的ZeroTier"><a href="#1-根据自己的服务器的类型安装对应的ZeroTier" class="headerlink" title="1. 根据自己的服务器的类型安装对应的ZeroTier"></a>1. 根据自己的服务器的类型安装对应的ZeroTier</h3><hr><h3 id="2-正式开始搭建"><a href="#2-正式开始搭建" class="headerlink" title="2. 正式开始搭建"></a>2. 正式开始搭建</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>1. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zerotier-cli initmoon identity.public &gt;&gt; moon.json<br></code></pre></td></tr></table></figure><ol start="2"><li>修改模板（moon.json）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">找到以下这行，然后根据自己的IP地址修改</span><br>“stableEndpoints”: [ “8.8.8.8/9993” ] #8.8.8.8 改为你的公网IP<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果有多个IP则加“,”号区分</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例 “stableEndpoints”: [ “8.8.8.8/9993”,<span class="hljs-string">&quot;IPV6地址/9993&quot;</span> ]</span><br></code></pre></td></tr></table></figure><ol start="3"><li>生成MOON签名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">sudo zerotier-cli genmoon moon.json<br></code></pre></td></tr></table></figure><ul><li><p>运行后在当前目录下会生成类似0000xxx.moon的文件</p></li><li><p>“0000xxx”这一串字符就是这台Moon的ID，在后续使用中会用到，需要记住</p></li></ul><ol start="4"><li><strong>把Moon加入到网络中</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs batch"># 在当前目录下建立文件夹 moons.d<br># 然后将刚刚生成的 “0000xxx.moon” 文件拷贝进去<br></code></pre></td></tr></table></figure><ol start="5"><li><p>将ZeroTier程序重新启动</p></li><li><p><strong>最后在防火墙上放行udp的9993端口！！！！！</strong></p></li><li><p>搭建完成</p></li></ol><hr><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><ol><li><p>找到安装ZeroTier的系统目录；<u><em>一般在C:\ProgramData\这个目录下，这个目录有可能被隐藏，需要打开隐藏目录</em></u></p></li><li><p>用管理员打开CMD命令行</p></li><li><p>在里面写入以下命令</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs batch">cd &quot;你刚刚找到的ZeroTier的系统目录&quot;<br>(例：cd C:\ProgramData\ZeroTier\One&quot;)<br></code></pre></td></tr></table></figure><ol start="4"><li><p>接下来和在Linux中搭建Moon的内容一致</p></li><li><p>生成Moon模板（在当前目录下）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">zerotier-one_x64.exe -i initmoon identity.public &gt;&gt; moon.json<br></code></pre></td></tr></table></figure><ol start="6"><li>修改模板（moon.json）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs batch"># 找到以下这行，然后根据自己的IP地址修改<br>“stableEndpoints”: [ “8.8.8.8/9993” ] #8.8.8.8 改为你的公网IP<br># 如果有多个IP则加“,”号区分<br># 例 “stableEndpoints”: [ “8.8.8.8/9993”,&quot;IPV6地址/9993&quot; ]<br></code></pre></td></tr></table></figure><ol start="7"><li>生成MOON签名</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">zerotier-one_x64.exe -i genmoon moon.json<br></code></pre></td></tr></table></figure><ul><li><p>运行后在C:\ProgramData\ZeroTier\One\目录下会生成类似000xx.moon的文件</p></li><li><p>“000xx”这一串字符就是这台Moon的ID，在后续使用中会用到，需要记住</p></li></ul><ol start="8"><li>把Moon加入到网络中</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs batch"># 在C:\ProgramData\ZeroTier\One\目录下建立文件夹 moons.d<br># 然后将刚刚生成的 “000xx.moon” 文件拷贝进去<br></code></pre></td></tr></table></figure><ol start="9"><li><p>将ZeroTier程序重新启动</p></li><li><p><strong>最后在防火墙上放行udp和tcp的9993端口！！！！！</strong></p></li><li><p>搭建完成</p></li></ol><h3 id="3-使用Moon服务器"><a href="#3-使用Moon服务器" class="headerlink" title="3. 使用Moon服务器"></a>3. 使用Moon服务器</h3><h4 id="在需要使用Moon服务器连接的设备上执行以下命令"><a href="#在需要使用Moon服务器连接的设备上执行以下命令" class="headerlink" title="在需要使用Moon服务器连接的设备上执行以下命令"></a>在需要使用Moon服务器连接的设备上执行以下命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Windows</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">需要使用cmd的管理员模式</span><br>cd C:\ProgramData\ZeroTier\One\<br>zerotier-one_x64.exe -q orbit 0000xxx 00000xxx #moon服务器的ID值，输入2遍<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Linux</span><br>sudo zerotier-cli orbit 000000xxxxx 000000xxxxx  #moon服务器的ID值，输入2遍<br></code></pre></td></tr></table></figure><h3 id="4-验证客户端是否成功使用Moon服务器"><a href="#4-验证客户端是否成功使用Moon服务器" class="headerlink" title="4. 验证客户端是否成功使用Moon服务器"></a>4. 验证客户端是否成功使用Moon服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Windows</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">同样使用cmd的管理员模式</span><br>cd C:\ProgramData\ZeroTier\One\<br>zerotier-one_x64.exe -q listpeers<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Linux</span><br>sudo zerotier-cli listpeers<br></code></pre></td></tr></table></figure><hr><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><ul><li>如果在一开始的时候ZeroTier的网络加错了，没关系，退出重新加入正确的就好</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Windows</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">右键屏幕右下方的小图标栏中的zerotier图标，加入正确的网络就行</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Linux</span><br>zerotier-cli leave &quot;刚刚错误的网络ID&quot;<br>zerotier-cli join &quot;正确的网络ID&quot; <br></code></pre></td></tr></table></figure><ul><li>关于三条命令的解释</li></ul><table><thead><tr><th align="center">zerotier-cli listpeers</th><th align="center">zerotier-cli peers</th><th align="center">zerotier-cli listnetworks</th></tr></thead><tbody><tr><td align="center">列出所有对等点的信息；</td><td align="center">列出所有对等点的信息，<u><em>但是更加漂亮</em></u></td><td align="center">列出当前设备加入的所有zerotier网络信息</td></tr></tbody></table><p><strong>Listpeers的输出信息</strong></p><table><thead><tr><th><ztaddr></th><th><ver></th><th><role></th><th><lat></th><th><link></th><th><lastTX></th><th><lastRX></th><th><path></th></tr></thead><tbody><tr><td>zerotier私有地址</td><td>版本号</td><td>对等点身份（行星节点、还是叶子结点、还是中转服务器节点）</td><td>服务器的延迟</td><td>连接类型</td><td>最后一次数据发送的时间戳</td><td>最后一次数据接收的时间戳</td><td>实际的IP地址以及端口</td></tr></tbody></table><p><strong>Peers的输出信息</strong></p><table><thead><tr><th><ztaddr></th><th><path></th><th><latency></th><th><version></th><th><role></th></tr></thead><tbody><tr><td>zerotier私有地址</td><td>实际的IP地址以及端口</td><td>服务器的延迟</td><td>zerotier的版本号</td><td>对等点身份（行星节点、还是叶子结点、还是中转服务器节点）</td></tr></tbody></table><p><strong>Listnetworks的输出信息</strong></p><table><thead><tr><th><nwid></th><th><name></th><th><mac></th><th><status></th><th><type></th><th><dev></th><th><ZT assigned ips></th></tr></thead><tbody><tr><td>zerotier网络的唯一标识符</td><td>网络名称（可以在zerotier官网自己定义）</td><td>当前设备的物理地址</td><td>当前设备在zerotier网络中的状态</td><td>网络类型（私有&#x2F;公共）</td><td>网络接口的设备名称</td><td>当前设备在zerotier中被分配的IP地址</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>内网穿透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ZeroTier One</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Proxmox VE网络</title>
    <link href="/2024/10/18/Proxmox%20VE%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/10/18/Proxmox%20VE%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="PVE网络"><a href="#PVE网络" class="headerlink" title="PVE网络"></a>PVE网络</h1><h2 id="软件定义网络（SDN）"><a href="#软件定义网络（SDN）" class="headerlink" title="软件定义网络（SDN）"></a>软件定义网络（SDN）</h2><ul><li>允许用户在数据中心级别创建虚拟网络(Vnet)</li><li>隔离由区域组成，一个区域就是它自己的虚拟隔离网络区域。</li><li>VPN是连接到区域的一种虚拟网络。根据专区使用的类型或插件的不同，它可能会有不同的行为，并提供不同的功能、优点或缺点。</li><li>通常，vNet显示为带有VLAN或VXLAN标签的普通Linux网桥，但有些网桥也可以使用第3层路由进行控制。</li><li>从群集范围的数据中心SDN管理界面提交配置后，将在每个节点上本地部署VNET。</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><table><thead><tr><th>VLAN</th><th>QinQ</th><th>VXLan</th><th>Simple</th><th>bgp-evpn</th></tr></thead><tbody><tr><td>虚拟LAN是细分LAN的经典方法</td><td>堆叠VLAN(正式名称为IEEE 802.1ad)</td><td>(第2层VXLAN)</td><td>隔离网桥，简单的3层路由网桥(NAT)</td><td>使用第3层边界网关协议路由的VXLAN</td></tr></tbody></table><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>你需要在每个节点上安装 <code>libpve-network-perl</code> 和 <code>ifupdown2</code> 才能启用实验性的SDN功能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt update &amp;&amp; apt install libpve-network-perl ifupdown2 dnsmasq -y<br></code></pre></td></tr></table></figure><p>随后在<code>/etc/network/interfaces</code>末尾添加下面代码，这样SDN配置文件才能被读取和启用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/network/interfaces.d/*<br></code></pre></td></tr></table></figure><hr><h2 id="PVE配置独立NAT网卡"><a href="#PVE配置独立NAT网卡" class="headerlink" title="PVE配置独立NAT网卡"></a>PVE配置独立NAT网卡</h2><ul><li><p>这里仅仅只是配置独立NAT网卡，并没有配置dhcp服务</p></li><li><p>网卡设置完，每台设备的ip地址以及网关、dns需要自己手动设置</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/network/interfaces<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">auto vmbr1<br>iface vmbr1 inet static<br>        address 10.0.0.1/24 # ip子网地址随意写，只要不冲突<br>        gateway 1.2.3.254  # 网关<br>        bridge-ports none <br>        bridge-stp off<br>        bridge-fd 0<br>        post-up echo 1 &gt; /proc/sys/net/ipv4/ip_forward<br>        # 这一条表示，开启ipv4转发，这是内核参数，让linux可以转发自身的ipv4数据包<br>        # post-up echo 1 &gt; /proc/sys/net/ipv6/ip_forward<br>        # 这一条表示，开启ipv6转发，这是内核参数，让linux可以转发自身的ipv4数据包（根据自身情况开启）<br>        post-up iptables -t nat -A POSTROUTING -s &#x27;10.0.0.0/24&#x27; -o vmbr0 -j MASQUERADE<br>        # 这一条表示，网卡启用之后开启防火墙转发，转发规则为“源地址10.0.0.0/24”的流量，转发到vmbr0接口，*MASQUERADE*的意思是对IP地址数据包进行改写<br>        post-down iptables -t nat -D POSTROUTING -s &#x27;10.0.0.0/24&#x27; -o vmbr0 -j MASQUERADE<br>        # 这一条表示，网卡禁用之后删除这一条转发规则，转发规则为“源地址10.0.0.0/24”的流量，转发到vmbr0接口，*MASQUERADE*的意思是对IP地址数据包进行改写<br></code></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li><p><a href="https://einverne.github.io/post/2021/10/proxmox-ve-config-nat-vm-use-same-public-ip.html">独服 Proxmox VE 配置 NAT 使虚拟机共用一个公网 IP | Verne in GitHub</a></p></li><li><p><a href="https://pve-doc-cn.readthedocs.io/zh-cn/latest/">Proxmox VE 中文手册 v7.3 </a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Proxmox VE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cockpit（驾驶舱服务）</title>
    <link href="/2024/10/14/cockpit%EF%BC%88%E9%A9%BE%E9%A9%B6%E8%88%B1%E6%9C%8D%E5%8A%A1%EF%BC%89/"/>
    <url>/2024/10/14/cockpit%EF%BC%88%E9%A9%BE%E9%A9%B6%E8%88%B1%E6%9C%8D%E5%8A%A1%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="cockpit（驾驶舱服务）"><a href="#cockpit（驾驶舱服务）" class="headerlink" title="cockpit（驾驶舱服务）"></a>cockpit（驾驶舱服务）</h1><p>Cockpit是一个由Red Hat公司赞助的开源（基于GNUL LGPL协议）免费的基于 Web 的服务器图形界面。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="Fedora"><a href="#Fedora" class="headerlink" title="Fedora"></a>Fedora</h3><p>Cockpit<strong>默认安装在 Fedora Server 中</strong>。要在 Fedora 的其他变体上安装 Cockpit，请使用以下命令。</p><ol><li><p> 安装驾驶舱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> dnf install cockpit -y<br></code></pre></td></tr></table></figure></li><li><p> 启用驾驶舱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> --now cockpit.socket<br></code></pre></td></tr></table></figure></li><li><p>必要时打开防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --add-service=cockpit<br><span class="hljs-built_in">sudo</span> firewall-cmd --add-service=cockpit --permanent<br></code></pre></td></tr></table></figure></li></ol><h3 id="Red-Hat-Enterprise-Linux"><a href="#Red-Hat-Enterprise-Linux" class="headerlink" title="Red Hat Enterprise Linux"></a>Red Hat Enterprise Linux</h3><p>Cockpit 可在 Red Hat Enterprise Linux 7 及更高版本中使用。</p><ol><li><p>在 RHEL 7 上，启用<em>Extras</em>存储库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> subscription-manager repos --<span class="hljs-built_in">enable</span> rhel-7-server-extras-rpms<br></code></pre></td></tr></table></figure><p>RHEL 8 不需要任何非默认存储库。</p></li><li><p> 安装驾驶舱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install cockpit -y <br></code></pre></td></tr></table></figure></li><li><p> 启用驾驶舱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> --now cockpit.socket<br></code></pre></td></tr></table></figure></li><li><p>在 RHEL 7 上，或者如果您在 RHEL 8 上使用非默认区域，请打开防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --add-service=cockpit<br><span class="hljs-built_in">sudo</span> firewall-cmd --add-service=cockpit --permanent<br></code></pre></td></tr></table></figure></li></ol><h3 id="Fedora-Core操作系统"><a href="#Fedora-Core操作系统" class="headerlink" title="Fedora Core操作系统"></a>Fedora Core操作系统</h3><p>标准 Fedora CoreOS 映像不包含 Cockpit 软件包。</p><ol><li><p>将 Cockpit 软件包安装为覆盖 RPM：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm-ostree install cockpit-system cockpit-ostree cockpit-podman <br></code></pre></td></tr></table></figure><p>根据您的配置，您可能还想使用其他<a href="https://cockpit-project.org/applications.html"><code>cockpit-*</code>扩展</a>，例如<code>cockpit-kdump</code>或<code>cockpit-networkmanager</code> 。</p><p>如果您有自定义构建的 OSTree，只需在构建中包含相同的包即可。</p></li><li><p> 重新启动</p></li></ol><p>当 CoreOS 计算机仅通过另一台运行 Cockpit 的主机连接时，步骤 1 和 2 就足够了。</p><p>如果您还想运行 Web 服务器来直接登录 CoreOS 主机：</p><ol><li><p>启用基于密码的 SSH 登录，除非您仅使用<a href="https://cockpit-project.org/guide/latest/sso.html">SSO 登录</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PasswordAuthentication yes&#x27;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/ssh/sshd_config.d/02-enable-passwords.conf<br><span class="hljs-built_in">sudo</span> systemctl try-restart sshd<br></code></pre></td></tr></table></figure></li><li><p>使用特权容器（以 root 身份）运行 Cockpit Web 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">podman container runlabel --name cockpit-ws RUN quay.io/cockpit/ws<br></code></pre></td></tr></table></figure></li><li><p>让 Cockpit 在启动时启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">podman container runlabel INSTALL quay.io/cockpit/ws<br>systemctl <span class="hljs-built_in">enable</span> cockpit.service<br></code></pre></td></tr></table></figure></li></ol><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><p>Cockpit 在 CentOS 7 及更高版本中可用：</p><ol><li><p> 安装驾驶舱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install cockpit -y <br></code></pre></td></tr></table></figure></li><li><p> 启用驾驶舱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> --now cockpit.socket<br></code></pre></td></tr></table></figure></li><li><p>必要时打开防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --permanent --zone=public --add-service=cockpit<br><span class="hljs-built_in">sudo</span> firewall-cmd --reload<br></code></pre></td></tr></table></figure></li></ol><h3 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h3><p>这些命令需要 POSIX 兼容的 shell，例如<code>bash</code> 。对于其他 shell（例如<code>fish</code> ，请暂时运行<code>bash -i</code> 。</p><p>Cockpit 自版本 10 (Buster) 起在 Debian 中可用。</p><ol><li><p>要获取最新版本，我们建议启用向后<a href="https://backports.debian.org/">移植存储库</a>（以 root 身份）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">. /etc/os-release<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://deb.debian.org/debian <span class="hljs-variable">$&#123;VERSION_CODENAME&#125;</span>-backports main&quot;</span> &gt; \<br>   /etc/apt/sources.list.d/backports.list<br>apt update<br></code></pre></td></tr></table></figure></li><li><p>安装或更新包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install -t <span class="hljs-variable">$&#123;VERSION_CODENAME&#125;</span>-backports cockpit -y <br></code></pre></td></tr></table></figure></li></ol><p>更新 Cockpit 相关包和任何依赖项时，请确保如上所述使用<code>-t ...-backports</code> ，以便包含向后移植。</p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>这些命令需要 POSIX 兼容的 shell，例如<code>bash</code> 。对于其他 shell（例如<code>fish</code> ，请暂时运行<code>bash -i</code> 。</p><p>Cockpit 可在 Ubuntu 中使用，并<a href="https://help.ubuntu.com/community/UbuntuBackports">在 LTS 版本的官方向后移植中提供更新版本</a>。</p><p>我们建议从向后移植安装或更新最新版本。该存储库默认启用，但如果您自定义了 apt 源，则可能需要<a href="https://help.ubuntu.com/community/UbuntuBackports#Enabling_Backports">手动启用它们</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">. /etc/os-release<br><span class="hljs-built_in">sudo</span> apt install -t <span class="hljs-variable">$&#123;VERSION_CODENAME&#125;</span>-backports cockpit -y<br></code></pre></td></tr></table></figure><p>更新 Cockpit 相关包和任何依赖项时，请确保如上所述使用<code>-t ...-backports</code> ，以便包含向后移植。</p><h3 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h3><p><a href="https://archlinux.org/packages/extra/x86_64/cockpit/">Cockpit</a>可在<a href="https://www.archlinux.org/packages/">Arch Linux</a>中使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pacman -S cockpit<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> --now cockpit.socket<br></code></pre></td></tr></table></figure><p>如果第一个命令失败并显示“…的数据库文件不存在”，请首先使用<code>sudo pacman -Syu</code>刷新&#x2F;更新您的系统。</p><h2 id="通过Web界面访问"><a href="#通过Web界面访问" class="headerlink" title="通过Web界面访问"></a>通过Web界面访问</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//IP_ADDRESS_OF_MACHINE:9090</span><br></code></pre></td></tr></table></figure><h3 id="登录页"><a href="#登录页" class="headerlink" title="登录页"></a>登录页</h3><ul><li><p>这里通过系统用户进行登录，如系统普通用户”user“，密码为：“user”；</p></li><li><p>普通用户仅拥有，有限的权限，需要进行高级操作时可以进行”提权“</p></li></ul><p><img src="/img/assets/2024-10-14-16-37-42-image.png"></p><h3 id="内容概览"><a href="#内容概览" class="headerlink" title="内容概览"></a>内容概览</h3><p><img src="/img/assets/2024-10-14-16-41-16-image.png"></p><h3 id="内容日志"><a href="#内容日志" class="headerlink" title="内容日志"></a>内容日志</h3><p><img src="/img/assets/2024-10-14-16-41-50-image.png"></p><h3 id="存储页面"><a href="#存储页面" class="headerlink" title="存储页面"></a>存储页面</h3><p><img src="/img/assets/2024-10-14-16-42-09-image.png"></p><h3 id="网络页面"><a href="#网络页面" class="headerlink" title="网络页面"></a>网络页面</h3><p><img src="/img/assets/2024-10-14-16-42-32-image.png"></p><h3 id="用户账户页面"><a href="#用户账户页面" class="headerlink" title="用户账户页面"></a>用户账户页面</h3><p><img src="/img/assets/2024-10-14-16-42-58-image.png"></p><h3 id="系统服务页面"><a href="#系统服务页面" class="headerlink" title="系统服务页面"></a>系统服务页面</h3><p><img src="/img/assets/2024-10-14-16-43-19-image.png"></p><h3 id="内核转储页面"><a href="#内核转储页面" class="headerlink" title="内核转储页面"></a>内核转储页面</h3><p><img src="/img/assets/2024-10-14-16-44-03-image.png"></p><h3 id="软件更新页面"><a href="#软件更新页面" class="headerlink" title="软件更新页面"></a>软件更新页面</h3><p><img src="/img/assets/2024-10-14-16-44-21-image.png"></p><h3 id="应用程序页面"><a href="#应用程序页面" class="headerlink" title="应用程序页面"></a>应用程序页面</h3><p><img src="/img/assets/2024-10-14-16-44-44-image.png"></p><h3 id="系统诊断报告页面"><a href="#系统诊断报告页面" class="headerlink" title="系统诊断报告页面"></a>系统诊断报告页面</h3><p><img src="/img/assets/2024-10-14-16-45-04-image.png"></p><h3 id="远程终端页面"><a href="#远程终端页面" class="headerlink" title="远程终端页面"></a>远程终端页面</h3><p><img src="/img/assets/2024-10-14-16-45-27-image.png"></p><p>SELinux页面（Linux内核安全）</p><p><img src="/img/assets/2024-10-14-16-46-04-image.png"></p><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><p>Cockpit官网：<a href="https://cockpit-project.org/">https://cockpit-project.org/</a></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Red Hat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PVE优化</title>
    <link href="/2024/10/13/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    <url>/2024/10/13/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="第四次产业革命"><a href="#第四次产业革命" class="headerlink" title="第四次产业革命"></a>第四次产业革命</h1><h2 id="一、区块链定义："><a href="#一、区块链定义：" class="headerlink" title="一、区块链定义："></a>一、区块链定义：</h2><blockquote><p>所有区块按照时间顺序连接形成单向链式结构，第一个区块被称为创世区块；这是一个链式存储结构；区块就是链式存储结构中的数据元素</p></blockquote><h2 id="二、区块结构"><a href="#二、区块结构" class="headerlink" title="二、区块结构"></a>二、区块结构</h2><h2 id="三、区块链、物联网、云计算、大数据、人工智能"><a href="#三、区块链、物联网、云计算、大数据、人工智能" class="headerlink" title="三、区块链、物联网、云计算、大数据、人工智能"></a>三、区块链、物联网、云计算、大数据、人工智能</h2><h3 id="区块链-物联网"><a href="#区块链-物联网" class="headerlink" title="区块链+物联网"></a>区块链+物联网</h3><blockquote><p>物联网解决区块链信息上链的问题，避免人工干扰；基于区块链的分布式物联网解决中心管理模式下带来的基础设施建设和维护的巨资投入</p></blockquote><h3 id="区块链-云计算"><a href="#区块链-云计算" class="headerlink" title="区块链+云计算"></a>区块链+云计算</h3><blockquote><p>云计算解决应用本地化部署的成本；区块链解决云计算架构中的数据主权化的管理问题</p></blockquote><h3 id="区块链-人工智能"><a href="#区块链-人工智能" class="headerlink" title="区块链+人工智能"></a>区块链+人工智能</h3><blockquote><p>人工智能的生物识别可辅助建立更真实的数字身份认证；区块链解决个性化的人工智能</p></blockquote><h3 id="区块链-大数据"><a href="#区块链-大数据" class="headerlink" title="区块链+大数据"></a>区块链+大数据</h3><blockquote><p>大数据融入区块链，可以提高数据整合效率，降低数据维护成本，保障数据私密性，优化数据的分析挖掘能力</p></blockquote><h2 id="四、技术特性"><a href="#四、技术特性" class="headerlink" title="四、技术特性"></a>四、技术特性</h2><h2 id="五、对称加密"><a href="#五、对称加密" class="headerlink" title="五、对称加密"></a>五、对称加密</h2><h2 id="六、非对称加密"><a href="#六、非对称加密" class="headerlink" title="六、非对称加密"></a>六、非对称加密</h2><h2 id="七、常见的算法"><a href="#七、常见的算法" class="headerlink" title="七、常见的算法"></a>七、常见的算法</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><h3 id="Diffie-Hellman"><a href="#Diffie-Hellman" class="headerlink" title="Diffie-Hellman"></a>Diffie-Hellman</h3><h3 id="ECC-移动设备用"><a href="#ECC-移动设备用" class="headerlink" title="ECC(移动设备用)"></a>ECC(移动设备用)</h3><h3 id="EL-Gamal"><a href="#EL-Gamal" class="headerlink" title="EL Gamal"></a>EL Gamal</h3><h3 id="DSA-数字签名用"><a href="#DSA-数字签名用" class="headerlink" title="DSA(数字签名用)"></a>DSA(数字签名用)</h3><h3 id="哈希（信息提炼函数）"><a href="#哈希（信息提炼函数）" class="headerlink" title="哈希（信息提炼函数）"></a>哈希（信息提炼函数）</h3><h3 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h3><blockquote><p>任何输入信息的变化，会导致运算结果的明显变化</p></blockquote><h3 id="默克尔树"><a href="#默克尔树" class="headerlink" title="默克尔树"></a>默克尔树</h3><blockquote><p>是一种哈希二叉树，用于快速校验大规模数据的完整性</p></blockquote><h2 id="八、共识机制-公链-："><a href="#八、共识机制-公链-：" class="headerlink" title="八、共识机制(公链)："></a>八、共识机制(公链)：</h2><h3 id="POW-Proof-of-Work，工作量证明机制"><a href="#POW-Proof-of-Work，工作量证明机制" class="headerlink" title="POW(Proof of Work，工作量证明机制)"></a>POW(Proof of Work，工作量证明机制)</h3><blockquote><p>系统中的每个节点为整个系统提供计算能力（简称算力），通过竞争机制，让计算工作完成最出色的节点获得系统奖励（即区块的生成和数据的记录）；</p><ul><li>例子：比特币，莱特币</li></ul></blockquote><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>完全去中心化、算法易实现、节点自由进出</td><td>浪费能源；区块确认的时间难以缩短；对节点性能与网络环境要求较高；在确定最长链之前，可能造成工作浪费</td></tr></tbody></table><h3 id="POS-Proof-of-Stake，权益证明机制"><a href="#POS-Proof-of-Stake，权益证明机制" class="headerlink" title="POS(Proof of Stake，权益证明机制)"></a>POS(Proof of Stake，权益证明机制)</h3><blockquote><p>当创造一个新区块时，节点创建一个“币权”交易，交易会按照预先设定的比例把一些虚拟货币发送给节点本身</p></blockquote><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>比POW更节能；能在一定程度社那个缩减达成共识的时间</td><td>虚拟货币智能通过融资的方式发行，无法保证持有者的抛售行为；信用基础不够牢固</td></tr></tbody></table><h3 id="DPOS-Delegated-Proof-of-Stake，委托权益证明机制"><a href="#DPOS-Delegated-Proof-of-Stake，委托权益证明机制" class="headerlink" title="DPOS(Delegated Proof of Stake，委托权益证明机制)"></a>DPOS(Delegated Proof of Stake，委托权益证明机制)</h3><blockquote><p>通过选举代表来进行投票和决策，被选举出的节点来做新区块的创建、验证、签名和互相监督</p></blockquote><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>能耗低；极大缩短共识验证时间</td><td>不能够及时响应一些节点代表的作恶行为</td></tr></tbody></table><h3 id="PBFT-Practical-Byzantine-Fault-Tolerance，实用拜占庭容错机制"><a href="#PBFT-Practical-Byzantine-Fault-Tolerance，实用拜占庭容错机制" class="headerlink" title="PBFT(Practical Byzantine Fault Tolerance，实用拜占庭容错机制)"></a>PBFT(Practical Byzantine Fault Tolerance，实用拜占庭容错机制)</h3><blockquote><p>采用“许可投票，少数服从多数”来选举领导者并进行记账的共识机制；</p><p>允许拜占庭容错；允许强监督节点参与；具备权限分级能力；</p><p>每轮记账都会由全网节点共同选举领导者，容错率33%</p></blockquote><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>效率高；容错性高；节能环保</td><td>当网络不稳定或参与者数量过多时，系统的稳定性和效率会显著下降</td></tr></tbody></table><h2 id="九、记账方式"><a href="#九、记账方式" class="headerlink" title="九、记账方式"></a>九、记账方式</h2><h3 id="仅记录交易"><a href="#仅记录交易" class="headerlink" title="仅记录交易"></a>仅记录交易</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>存储数据简单，量小，交易上链的先后顺序不敏感</td><td>每次计算账户余额需要遍历所有交易汇总计算</td></tr></tbody></table><h3 id="同时记录交易和账户余额"><a href="#同时记录交易和账户余额" class="headerlink" title="同时记录交易和账户余额"></a>同时记录交易和账户余额</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>快速读取账号当前状态；账户状态与交易记录可以交叉验证</td><td>效率低；交易上链与账户更新需要同步操作</td></tr></tbody></table><h2 id="激励机制"><a href="#激励机制" class="headerlink" title="激励机制"></a>激励机制</h2><h3 id="无币区块链"><a href="#无币区块链" class="headerlink" title="无币区块链"></a>无币区块链</h3><blockquote><p>专注于分布式网络、共享账本、加密算法、智能合约等区块链技术的应用 </p></blockquote><h3 id="通证经济"><a href="#通证经济" class="headerlink" title="通证经济"></a>通证经济</h3><blockquote><p>针对区块链项目的社区自治模式，基于博弈论和产权理论设计社群经济模型、治理机制和自金融生态；</p><ul><li><p>通证是项目和社群价值的载体；</p></li><li><p>发行和分配制度设计是核心问题</p></li></ul></blockquote><h3 id="通证与区块链分离"><a href="#通证与区块链分离" class="headerlink" title="通证与区块链分离"></a>通证与区块链分离</h3><blockquote><p>把通证经济概念引入传统区域，利用通证设计激活经济活力</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
